# Production Deployment Workflow
# This workflow handles testing, building, and deploying the React application to Vercel
#
# Workflow stages:
# 1. Test & Verify - Run TypeScript checks, linting, and deployment verification
# 2. Build Application - Create production build with proper environment variables
# 3. Deploy to Vercel - Deploy the built application to production
# 4. Post-deployment checks - Verify deployment health and cleanup
# 5. Notify deployment status - Send deployment status notifications

name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  test:
    name: Test & Verify
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps --prefer-offline --no-audit
        npm ls --depth=0

    - name: Run TypeScript check
      run: npm run type-check

    - name: Run linting
      run: npm run lint
      continue-on-error: true

    - name: Run verification
      run: npm run verify:deployment
      env:
        CI: true
        SKIP_BUILD_CHECK: true
        NODE_ENV: test

  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    outputs:
      build-success: ${{ steps.build.outcome }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps --prefer-offline --no-audit
        npm ls --depth=0

    - name: Validate required secrets
      run: |
        echo "üîê Validating required secrets..."

        # Check if required secrets are set (without exposing values)
        if [ -z "${{ secrets.REACT_APP_SUPABASE_URL }}" ]; then
          echo "‚ùå REACT_APP_SUPABASE_URL secret is not set"
          exit 1
        fi

        if [ -z "${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}" ]; then
          echo "‚ùå REACT_APP_SUPABASE_ANON_KEY secret is not set"
          exit 1
        fi

        if [ -z "${{ secrets.REACT_APP_ENCRYPTION_KEY }}" ]; then
          echo "‚ùå REACT_APP_ENCRYPTION_KEY secret is not set"
          exit 1
        fi

        echo "‚úÖ All required secrets are configured"

    - name: Create environment file
      run: |
        echo "üìù Creating production environment file..."

        # Create .env.production with all required variables
        echo "REACT_APP_SUPABASE_URL=${{ secrets.REACT_APP_SUPABASE_URL }}" > .env.production
        echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}" >> .env.production
        echo "REACT_APP_ENCRYPTION_KEY=${{ secrets.REACT_APP_ENCRYPTION_KEY }}" >> .env.production
        echo "REACT_APP_ENVIRONMENT=production" >> .env.production
        echo "GENERATE_SOURCEMAP=false" >> .env.production
        echo "INLINE_RUNTIME_CHUNK=false" >> .env.production
        echo "IMAGE_INLINE_SIZE_LIMIT=0" >> .env.production
        echo "BUILD_PATH=build" >> .env.production

        echo "‚úÖ Environment file created successfully"

    - name: Build application
      id: build
      run: |
        echo "üöÄ Starting production build..."
        npm run build
        echo "‚úÖ Build completed successfully"

        # Verify build output
        if [ ! -f "build/index.html" ]; then
          echo "‚ùå Build failed: index.html not found"
          exit 1
        fi

        # Check build size
        BUILD_SIZE=$(du -sh build | cut -f1)
        echo "üì¶ Build size: $BUILD_SIZE"

        # List build contents
        echo "üìÅ Build contents:"
        ls -la build/
      env:
        CI: false
        NODE_ENV: production
        REACT_APP_OPENAI_API_KEY: ${{ secrets.REACT_APP_OPENAI_API_KEY }}
        REACT_APP_GEMINI_API_KEY: ${{ secrets.REACT_APP_GEMINI_API_KEY }}
        REACT_APP_CLAUDE_API_KEY: ${{ secrets.REACT_APP_CLAUDE_API_KEY }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: build/
        retention-days: 1

  deploy-vercel:
    name: Deploy to Vercel
    needs: [test, build]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: needs.build.outputs.build-success == 'success'

    environment:
      name: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/

    - name: Deploy to Vercel
      id: deploy
      uses: vercel/action@v1
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

    - name: Update deployment status
      if: always()
      run: |
        if [ "${{ steps.deploy.outcome }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üåê URL: ${{ steps.deploy.outputs.preview-url }}"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi

  post-deploy:
    name: Post-deployment checks
    needs: [deploy-vercel]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always() && needs.deploy-vercel.result == 'success'

    steps:
    - name: Health check
      run: |
        echo "üîç Running post-deployment health checks..."

        # Wait for deployment to be ready
        sleep 30

        # Basic health check (you can customize this URL)
        if [ -n "${{ needs.deploy-vercel.outputs.preview-url }}" ]; then
          curl -f "${{ needs.deploy-vercel.outputs.preview-url }}" || echo "‚ö†Ô∏è Health check failed"
        fi

        echo "‚úÖ Post-deployment checks completed"

    - name: Cleanup
      run: |
        echo "üßπ Cleaning up temporary files..."
        echo "‚úÖ Cleanup completed"

  notify:
    name: Notify deployment status
    needs: [test, build, deploy-vercel, post-deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Deployment notification
      run: |
        echo "üìä DEPLOYMENT SUMMARY"
        echo "===================="
        echo "Test: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Deploy: ${{ needs.deploy-vercel.result }}"
        echo "Post-deploy: ${{ needs.post-deploy.result }}"
        echo "===================="

        if [ "${{ needs.deploy-vercel.result }}" == "success" ]; then
          echo "üéâ Deployment completed successfully!"
          echo "üåê Application is live and ready!"
        else
          echo "‚ùå Deployment failed. Please check the logs above."
          exit 1
        fi
