import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import {
  ChevronLeft,
  Download,
  Share,
  Copy,
  Save,
  Eye,
  Edit,
  FileText,
  Presentation,
  Sparkles,
  Palette,
  Type,
  Image,
  BarChart3,
  Settings,
  Play,
  Pause,
  SkipBack,
  SkipForward,
  X
} from "lucide-react";
import WorkspaceSidebar from "@/components/WorkspaceSidebar";
import { useToast } from "@/hooks/use-toast";

interface Slide {
  id: string;
  title: string;
  content: string;
  type: "title" | "content" | "image" | "chart";
  layout: "default" | "two-column" | "image-left" | "image-right";
}

const DocumentEditor = () => {
  const { docId, type } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [documentTitle, setDocumentTitle] = useState("");
  const [content, setContent] = useState("# Your Document Title\n\nStart writing your content here...");
  const [slides, setSlides] = useState<Slide[]>([]);
  const [currentSlideIndex, setCurrentSlideIndex] = useState(0);
  const [isPreviewMode, setIsPreviewMode] = useState(false);
  const [isPresentationMode, setIsPresentationMode] = useState(false);
  const [isAIAssistantOpen, setIsAIAssistantOpen] = useState(false);
  const [aiPrompt, setAiPrompt] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);

  // Document data will be loaded from user's database or created new
  const documentData = {
    id: docId,
    title: docId === "new" ? "New Document" : "Untitled Document",
    type: type || "deck",
    slides: 0,
    lastEdited: "Just now"
  };

  useEffect(() => {
    // Initialize with empty document - users will create their own content
    setDocumentTitle(documentData.title);
    if (documentData.type === "deck") {
      setSlides([]);
    } else {
      setContent("");
    }
  }, [docId, type]);

  const handleSave = () => {
    toast({
      title: "Document saved",
      description: "Your changes have been saved successfully."
    });
  };

  const handleAIGenerate = async () => {
    if (!aiPrompt.trim()) return;

    setIsGenerating(true);

    // Simulate AI generation
    setTimeout(() => {
      if (documentData.type === "deck" && slides.length > 0) {
        const updatedSlides = [...slides];
        updatedSlides[currentSlideIndex] = {
          ...updatedSlides[currentSlideIndex],
          content: `# AI Generated Content\n\n${aiPrompt}\n\n- Key point 1\n- Key point 2\n- Key point 3\n\n*Generated by AI Assistant*`
        };
        setSlides(updatedSlides);
      } else {
        setContent(`# AI Generated Content\n\n${aiPrompt}\n\nThis is AI-generated content based on your prompt. You can edit and customize it as needed.\n\n## Key Points\n\n- Important insight 1\n- Important insight 2\n- Important insight 3\n\n## Next Steps\n\n1. Review the generated content\n2. Make necessary adjustments\n3. Add your personal touch`);
      }

      setIsGenerating(false);
      setIsAIAssistantOpen(false);
      setAiPrompt("");

      toast({
        title: "Content generated",
        description: "AI has generated new content for your document."
      });
    }, 2000);
  };

  const handleCopyLink = () => {
    navigator.clipboard.writeText(`https://app.example.com/share/doc/${docId}`);
    toast({
      title: "Link copied",
      description: "Share link copied to clipboard",
    });
  };

  const addNewSlide = () => {
    const newSlide: Slide = {
      id: Date.now().toString(),
      title: `Slide ${slides.length + 1}`,
      content: "# New Slide\n\nAdd your content here...",
      type: "content",
      layout: "default"
    };
    setSlides([...slides, newSlide]);
    setCurrentSlideIndex(slides.length);
  };

  const deleteSlide = (index: number) => {
    if (slides.length > 1) {
      const newSlides = slides.filter((_, i) => i !== index);
      setSlides(newSlides);
      setCurrentSlideIndex(Math.max(0, Math.min(currentSlideIndex, newSlides.length - 1)));
    }
  };

  const updateSlide = (index: number, updates: Partial<Slide>) => {
    const newSlides = [...slides];
    newSlides[index] = { ...newSlides[index], ...updates };
    setSlides(newSlides);
  };

  const currentSlide = slides[currentSlideIndex];

  return (
    <div className="min-h-screen flex bg-gradient-to-br from-black via-gray-900 to-green-950">
      <WorkspaceSidebar />

      <main className="flex-1 p-4 md:p-6 md:ml-64 transition-all duration-300">
        <div className="container mx-auto max-w-7xl">
          {/* Header */}
          <div className="mb-6 flex flex-col sm:flex-row items-start sm:items-center gap-4">
            <Button
              variant="ghost"
              onClick={() => navigate(documentData.type === "deck" ? "/workspace/pitch-perfect" : "/workspace/docs-decks")}
              className="sm:mr-4"
            >
              <ChevronLeft className="h-4 w-4 mr-1" />
              Back
            </Button>

            <div className="flex-1">
              <Input
                value={documentTitle}
                onChange={(e) => setDocumentTitle(e.target.value)}
                className="text-xl font-bold bg-transparent border-none p-0 focus:ring-0 text-white"
                placeholder="Document Title"
              />
            </div>

            <div className="flex flex-wrap gap-2">
              {documentData.type === "deck" && (
                <>
                  <Button
                    variant="outline"
                    onClick={() => setIsPreviewMode(!isPreviewMode)}
                    className="flex-1 sm:flex-none"
                  >
                    <Eye className="h-4 w-4 mr-2" />
                    {isPreviewMode ? "Edit" : "Preview"}
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => setIsPresentationMode(true)}
                    className="flex-1 sm:flex-none"
                  >
                    <Play className="h-4 w-4 mr-2" />
                    Present
                  </Button>
                </>
              )}
              <Button
                variant="outline"
                onClick={() => setIsAIAssistantOpen(true)}
                className="flex-1 sm:flex-none"
              >
                <Sparkles className="h-4 w-4 mr-2" />
                AI Assistant
              </Button>
              <Button variant="outline" onClick={handleCopyLink} className="flex-1 sm:flex-none">
                <Copy className="h-4 w-4 mr-2" />
                Share
              </Button>
              <Button onClick={handleSave} className="flex-1 sm:flex-none">
                <Save className="h-4 w-4 mr-2" />
                Save
              </Button>
            </div>
          </div>

          {/* Content Area */}
          {documentData.type === "deck" ? (
            <div className="grid grid-cols-1 lg:grid-cols-12 gap-6">
              {/* Slide Navigation */}
              <div className="lg:col-span-3">
                <Card className="bg-black/80 backdrop-blur-xl border-white/10">
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between text-white">
                      <span>Slides</span>
                      <Button size="sm" onClick={addNewSlide}>
                        <FileText className="h-4 w-4" />
                      </Button>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-2">
                    <div className="space-y-2 max-h-[60vh] overflow-y-auto">
                      {slides.map((slide, index) => (
                        <div
                          key={slide.id}
                          className={`p-3 rounded-lg cursor-pointer transition-colors ${
                            index === currentSlideIndex
                              ? "bg-green-600/20 border border-green-500/30"
                              : "bg-black/40 hover:bg-black/60"
                          }`}
                          onClick={() => setCurrentSlideIndex(index)}
                        >
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium text-white">{index + 1}. {slide.title}</p>
                              <p className="text-xs text-muted-foreground truncate">
                                {slide.content.split('\n')[0].replace('#', '').trim()}
                              </p>
                            </div>
                            {slides.length > 1 && (
                              <Button
                                size="sm"
                                variant="ghost"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  deleteSlide(index);
                                }}
                                className="opacity-0 group-hover:opacity-100 transition-opacity"
                              >
                                <X className="h-3 w-3" />
                              </Button>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Main Editor */}
              <div className="lg:col-span-9">
                {currentSlide && (
                  <Card className="bg-black/80 backdrop-blur-xl border-white/10">
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <Input
                          value={currentSlide.title}
                          onChange={(e) => updateSlide(currentSlideIndex, { title: e.target.value })}
                          className="text-lg font-semibold bg-transparent border-none p-0 focus:ring-0 text-white"
                          placeholder="Slide Title"
                        />
                        <div className="flex items-center gap-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => setCurrentSlideIndex(Math.max(0, currentSlideIndex - 1))}
                            disabled={currentSlideIndex === 0}
                          >
                            <SkipBack className="h-4 w-4" />
                          </Button>
                          <span className="text-sm text-muted-foreground">
                            {currentSlideIndex + 1} / {slides.length}
                          </span>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => setCurrentSlideIndex(Math.min(slides.length - 1, currentSlideIndex + 1))}
                            disabled={currentSlideIndex === slides.length - 1}
                          >
                            <SkipForward className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      {isPreviewMode ? (
                        <div className="min-h-[60vh] p-6 bg-white text-black rounded-lg">
                          <div
                            className="prose prose-lg max-w-none"
                            dangerouslySetInnerHTML={{
                              __html: currentSlide.content
                                .replace(/^# /gm, '<h1>')
                                .replace(/^## /gm, '<h2>')
                                .replace(/^### /gm, '<h3>')
                                .replace(/^\- /gm, '<li>')
                                .replace(/\n/g, '<br>')
                            }}
                          />
                        </div>
                      ) : (
                        <Textarea
                          value={currentSlide.content}
                          onChange={(e) => updateSlide(currentSlideIndex, { content: e.target.value })}
                          className="min-h-[60vh] bg-black/20 border-white/10 text-white font-mono"
                          placeholder="Enter slide content in Markdown format..."
                        />
                      )}
                    </CardContent>
                  </Card>
                )}
              </div>
            </div>
          ) : (
            // Document Editor (non-deck)
            <div className="grid grid-cols-1 lg:grid-cols-12 gap-6">
              <div className="lg:col-span-9">
                <Card className="bg-black/80 backdrop-blur-xl border-white/10">
                  <CardContent className="p-6">
                    <Textarea
                      value={content}
                      onChange={(e) => setContent(e.target.value)}
                      className="min-h-[70vh] bg-black/20 border-white/10 text-white font-mono"
                      placeholder="Start writing your document..."
                    />
                  </CardContent>
                </Card>
              </div>

              <div className="lg:col-span-3">
                <Card className="bg-black/80 backdrop-blur-xl border-white/10">
                  <CardHeader>
                    <CardTitle className="text-white">Document Tools</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label className="text-white">Document Type</Label>
                      <Select defaultValue={documentData.type}>
                        <SelectTrigger className="bg-black/20 border-white/10">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="document">Document</SelectItem>
                          <SelectItem value="report">Report</SelectItem>
                          <SelectItem value="proposal">Proposal</SelectItem>
                          <SelectItem value="memo">Memo</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <Button className="w-full" variant="outline">
                        <Type className="h-4 w-4 mr-2" />
                        Format Text
                      </Button>
                      <Button className="w-full" variant="outline">
                        <Image className="h-4 w-4 mr-2" />
                        Insert Image
                      </Button>
                      <Button className="w-full" variant="outline">
                        <BarChart3 className="h-4 w-4 mr-2" />
                        Add Chart
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          )}
        </div>

        {/* AI Assistant Modal */}
        <Dialog open={isAIAssistantOpen} onOpenChange={setIsAIAssistantOpen}>
          <DialogContent className="bg-black/90 backdrop-blur-xl border-white/10 text-white">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <Sparkles className="h-5 w-5 text-green-400" />
                AI Content Assistant
              </DialogTitle>
            </DialogHeader>

            <div className="space-y-4">
              <div>
                <Label>What would you like me to help you with?</Label>
                <Textarea
                  value={aiPrompt}
                  onChange={(e) => setAiPrompt(e.target.value)}
                  placeholder="E.g., 'Write a compelling problem statement for a fintech startup' or 'Create bullet points about market opportunity'"
                  className="bg-black/20 border-white/10"
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-2 gap-2">
                <Button variant="outline" onClick={() => setAiPrompt("Write a compelling problem statement")}>
                  Problem Statement
                </Button>
                <Button variant="outline" onClick={() => setAiPrompt("Create a solution overview")}>
                  Solution Overview
                </Button>
                <Button variant="outline" onClick={() => setAiPrompt("Describe the market opportunity")}>
                  Market Opportunity
                </Button>
                <Button variant="outline" onClick={() => setAiPrompt("Explain the business model")}>
                  Business Model
                </Button>
              </div>
            </div>

            <DialogFooter>
              <Button variant="outline" onClick={() => setIsAIAssistantOpen(false)}>
                Cancel
              </Button>
              <Button onClick={handleAIGenerate} disabled={isGenerating || !aiPrompt.trim()}>
                {isGenerating ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Sparkles className="h-4 w-4 mr-2" />
                    Generate Content
                  </>
                )}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Presentation Mode */}
        {isPresentationMode && currentSlide && (
          <div className="fixed inset-0 bg-black z-50 flex items-center justify-center">
            <div className="w-full h-full flex flex-col">
              <div className="flex-1 flex items-center justify-center p-8">
                <div className="max-w-4xl w-full bg-white text-black rounded-lg p-12 shadow-2xl">
                  <div
                    className="prose prose-xl max-w-none text-center"
                    dangerouslySetInnerHTML={{
                      __html: currentSlide.content
                        .replace(/^# /gm, '<h1 class="text-4xl font-bold mb-8">')
                        .replace(/^## /gm, '<h2 class="text-2xl font-semibold mb-6">')
                        .replace(/^### /gm, '<h3 class="text-xl font-medium mb-4">')
                        .replace(/^\- /gm, '<li class="text-lg mb-2">')
                        .replace(/\n/g, '<br>')
                    }}
                  />
                </div>
              </div>

              <div className="bg-black/80 backdrop-blur-xl p-4 flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <Button
                    variant="outline"
                    onClick={() => setCurrentSlideIndex(Math.max(0, currentSlideIndex - 1))}
                    disabled={currentSlideIndex === 0}
                  >
                    <SkipBack className="h-4 w-4" />
                  </Button>
                  <span className="text-white">
                    {currentSlideIndex + 1} / {slides.length}
                  </span>
                  <Button
                    variant="outline"
                    onClick={() => setCurrentSlideIndex(Math.min(slides.length - 1, currentSlideIndex + 1))}
                    disabled={currentSlideIndex === slides.length - 1}
                  >
                    <SkipForward className="h-4 w-4" />
                  </Button>
                </div>

                <Button onClick={() => setIsPresentationMode(false)}>
                  Exit Presentation
                </Button>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default DocumentEditor;
