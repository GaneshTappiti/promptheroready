{"version":3,"file":"static/js/3615.134dbbb8.chunk.js","mappings":"0MAWA,MAmDA,EAnDgEA,IAIzD,IAJ0D,SAC/DC,EAAQ,mBACRC,EAAkB,eAClBC,GAAiB,GAClBH,EACC,MAAM,QAAEI,EAAO,aAAEC,EAAY,gBAAEC,EAAe,QAAEC,IAAYC,EAAAA,EAAAA,OACtD,MAAEC,IAAUC,EAAAA,EAAAA,MAGlB,OAAIH,GAEAI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,+DAA8DX,UAC3EU,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYX,SAAC,6BAM7BG,EAUDD,IAAmBE,GACrBI,EAAM,CACJI,MAAO,gBACPC,YAAa,uDACbC,QAAS,iBAEJJ,EAAAA,EAAAA,KAACK,EAAAA,GAAQ,CAACC,GAAG,SAASC,SAAO,KAIlChB,IAAuBI,EAAgBJ,IACzCO,EAAM,CACJI,MAAO,2BACPC,YAAa,iEACbC,QAAS,iBAEJJ,EAAAA,EAAAA,KAACK,EAAAA,GAAQ,CAACC,GAAG,SAASC,SAAO,MAI/BP,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAlB,SAAGA,KA7BRQ,EAAM,CACJI,MAAO,gBACPC,YAAa,gDACbC,QAAS,iBAEJJ,EAAAA,EAAAA,KAACK,EAAAA,GAAQ,CAACC,GAAG,aAAaC,SAAO,K","sources":["components/admin/ProtectedAdminRoute.tsx"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAdmin, AdminPermissions } from '@/contexts/AdminContext';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ProtectedAdminRouteProps {\n  children: React.ReactNode;\n  requiredPermission?: keyof AdminPermissions;\n  superAdminOnly?: boolean;\n}\n\nconst ProtectedAdminRoute: React.FC<ProtectedAdminRouteProps> = ({\n  children,\n  requiredPermission,\n  superAdminOnly = false,\n}) => {\n  const { isAdmin, isSuperAdmin, checkPermission, loading } = useAdmin();\n  const { toast } = useToast();\n\n  // Show loading state while checking permissions\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-transparent flex items-center justify-center\">\n        <div className=\"text-white\">Loading admin panel...</div>\n      </div>\n    );\n  }\n\n  // Check if user is admin at all\n  if (!isAdmin) {\n    toast({\n      title: \"Access Denied\",\n      description: \"You don't have permission to access this page\",\n      variant: \"destructive\"\n    });\n    return <Navigate to=\"/workspace\" replace />;\n  }\n\n  // Check if super admin is required\n  if (superAdminOnly && !isSuperAdmin) {\n    toast({\n      title: \"Access Denied\",\n      description: \"This page is only accessible to super administrators\",\n      variant: \"destructive\"\n    });\n    return <Navigate to=\"/admin\" replace />;\n  }\n\n  // Check specific permission if required\n  if (requiredPermission && !checkPermission(requiredPermission)) {\n    toast({\n      title: \"Insufficient Permissions\",\n      description: \"You don't have the required permissions to access this feature\",\n      variant: \"destructive\"\n    });\n    return <Navigate to=\"/admin\" replace />;\n  }\n\n  // All checks passed, render the protected content\n  return <>{children}</>;\n};\n\nexport default ProtectedAdminRoute;\n"],"names":["_ref","children","requiredPermission","superAdminOnly","isAdmin","isSuperAdmin","checkPermission","loading","useAdmin","toast","useToast","_jsx","className","title","description","variant","Navigate","to","replace","_Fragment"],"sourceRoot":""}