{"version":3,"file":"static/js/3372.9fca6245.chunk.js","mappings":"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","sources":["lib/presentation/themes.ts","services/presentationAIService.ts","services/presentationService.ts"],"sourcesContent":["// Presentation Themes - Adapted from presentation-ai repository\n\nimport { ThemeProperties, ThemeType } from '@/types/presentation';\n\nexport const defaultThemes: Record<ThemeType, ThemeProperties> = {\n  mystique: {\n    id: 'mystique',\n    name: 'Mystique',\n    description: 'Dark and mysterious theme with purple accents',\n    colors: {\n      primary: '#8B5CF6',\n      secondary: '#A78BFA',\n      accent: '#C4B5FD',\n      background: '#0F0F23',\n      surface: '#1E1B4B',\n      text: '#F8FAFC',\n      textSecondary: '#CBD5E1',\n    },\n    fonts: {\n      heading: 'Inter, sans-serif',\n      body: 'Inter, sans-serif',\n      code: 'JetBrains Mono, monospace',\n    },\n    spacing: {\n      small: '0.5rem',\n      medium: '1rem',\n      large: '2rem',\n    },\n    borderRadius: '0.75rem',\n    shadows: {\n      small: '0 1px 3px rgba(139, 92, 246, 0.1)',\n      medium: '0 4px 6px rgba(139, 92, 246, 0.1)',\n      large: '0 10px 15px rgba(139, 92, 246, 0.1)',\n    },\n    animations: {\n      duration: '0.3s',\n      easing: 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n  },\n  aurora: {\n    id: 'aurora',\n    name: 'Aurora',\n    description: 'Bright and colorful theme with gradient accents',\n    colors: {\n      primary: '#06B6D4',\n      secondary: '#0891B2',\n      accent: '#67E8F9',\n      background: '#F0F9FF',\n      surface: '#FFFFFF',\n      text: '#0F172A',\n      textSecondary: '#475569',\n    },\n    fonts: {\n      heading: 'Poppins, sans-serif',\n      body: 'Inter, sans-serif',\n    },\n    spacing: {\n      small: '0.5rem',\n      medium: '1rem',\n      large: '2rem',\n    },\n    borderRadius: '1rem',\n    shadows: {\n      small: '0 1px 3px rgba(6, 182, 212, 0.1)',\n      medium: '0 4px 6px rgba(6, 182, 212, 0.1)',\n      large: '0 10px 15px rgba(6, 182, 212, 0.1)',\n    },\n    animations: {\n      duration: '0.3s',\n      easing: 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n  },\n  nexus: {\n    id: 'nexus',\n    name: 'Nexus',\n    description: 'Modern tech theme with blue and gray tones',\n    colors: {\n      primary: '#3B82F6',\n      secondary: '#1D4ED8',\n      accent: '#93C5FD',\n      background: '#F8FAFC',\n      surface: '#FFFFFF',\n      text: '#1E293B',\n      textSecondary: '#64748B',\n    },\n    fonts: {\n      heading: 'Space Grotesk, sans-serif',\n      body: 'Inter, sans-serif',\n    },\n    spacing: {\n      small: '0.5rem',\n      medium: '1rem',\n      large: '2rem',\n    },\n    borderRadius: '0.5rem',\n    shadows: {\n      small: '0 1px 3px rgba(59, 130, 246, 0.1)',\n      medium: '0 4px 6px rgba(59, 130, 246, 0.1)',\n      large: '0 10px 15px rgba(59, 130, 246, 0.1)',\n    },\n    animations: {\n      duration: '0.3s',\n      easing: 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n  },\n  zenith: {\n    id: 'zenith',\n    name: 'Zenith',\n    description: 'Clean and minimal theme with green accents',\n    colors: {\n      primary: '#10B981',\n      secondary: '#059669',\n      accent: '#6EE7B7',\n      background: '#FFFFFF',\n      surface: '#F9FAFB',\n      text: '#111827',\n      textSecondary: '#6B7280',\n    },\n    fonts: {\n      heading: 'Outfit, sans-serif',\n      body: 'Inter, sans-serif',\n    },\n    spacing: {\n      small: '0.5rem',\n      medium: '1rem',\n      large: '2rem',\n    },\n    borderRadius: '0.375rem',\n    shadows: {\n      small: '0 1px 3px rgba(16, 185, 129, 0.1)',\n      medium: '0 4px 6px rgba(16, 185, 129, 0.1)',\n      large: '0 10px 15px rgba(16, 185, 129, 0.1)',\n    },\n    animations: {\n      duration: '0.3s',\n      easing: 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n  },\n  prism: {\n    id: 'prism',\n    name: 'Prism',\n    description: 'Vibrant theme with rainbow gradient elements',\n    colors: {\n      primary: '#EC4899',\n      secondary: '#BE185D',\n      accent: '#F9A8D4',\n      background: '#FDF2F8',\n      surface: '#FFFFFF',\n      text: '#1F2937',\n      textSecondary: '#6B7280',\n    },\n    fonts: {\n      heading: 'Playfair Display, serif',\n      body: 'Inter, sans-serif',\n    },\n    spacing: {\n      small: '0.5rem',\n      medium: '1rem',\n      large: '2rem',\n    },\n    borderRadius: '1.5rem',\n    shadows: {\n      small: '0 1px 3px rgba(236, 72, 153, 0.1)',\n      medium: '0 4px 6px rgba(236, 72, 153, 0.1)',\n      large: '0 10px 15px rgba(236, 72, 153, 0.1)',\n    },\n    animations: {\n      duration: '0.3s',\n      easing: 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n  },\n  velocity: {\n    id: 'velocity',\n    name: 'Velocity',\n    description: 'Dynamic theme with orange and red gradients',\n    colors: {\n      primary: '#F97316',\n      secondary: '#EA580C',\n      accent: '#FED7AA',\n      background: '#FFF7ED',\n      surface: '#FFFFFF',\n      text: '#1C1917',\n      textSecondary: '#78716C',\n    },\n    fonts: {\n      heading: 'Montserrat, sans-serif',\n      body: 'Inter, sans-serif',\n    },\n    spacing: {\n      small: '0.5rem',\n      medium: '1rem',\n      large: '2rem',\n    },\n    borderRadius: '0.75rem',\n    shadows: {\n      small: '0 1px 3px rgba(249, 115, 22, 0.1)',\n      medium: '0 4px 6px rgba(249, 115, 22, 0.1)',\n      large: '0 10px 15px rgba(249, 115, 22, 0.1)',\n    },\n    animations: {\n      duration: '0.3s',\n      easing: 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n  },\n  quantum: {\n    id: 'quantum',\n    name: 'Quantum',\n    description: 'Futuristic theme with neon accents',\n    colors: {\n      primary: '#8B5CF6',\n      secondary: '#7C3AED',\n      accent: '#C4B5FD',\n      background: '#0C0A09',\n      surface: '#1C1917',\n      text: '#FAFAF9',\n      textSecondary: '#A8A29E',\n    },\n    fonts: {\n      heading: 'Orbitron, sans-serif',\n      body: 'Inter, sans-serif',\n      code: 'JetBrains Mono, monospace',\n    },\n    spacing: {\n      small: '0.5rem',\n      medium: '1rem',\n      large: '2rem',\n    },\n    borderRadius: '0.25rem',\n    shadows: {\n      small: '0 0 10px rgba(139, 92, 246, 0.3)',\n      medium: '0 0 20px rgba(139, 92, 246, 0.3)',\n      large: '0 0 30px rgba(139, 92, 246, 0.3)',\n    },\n    animations: {\n      duration: '0.3s',\n      easing: 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n  },\n  eclipse: {\n    id: 'eclipse',\n    name: 'Eclipse',\n    description: 'Dark professional theme with subtle highlights',\n    colors: {\n      primary: '#6366F1',\n      secondary: '#4F46E5',\n      accent: '#A5B4FC',\n      background: '#111827',\n      surface: '#1F2937',\n      text: '#F9FAFB',\n      textSecondary: '#D1D5DB',\n    },\n    fonts: {\n      heading: 'IBM Plex Sans, sans-serif',\n      body: 'Inter, sans-serif',\n    },\n    spacing: {\n      small: '0.5rem',\n      medium: '1rem',\n      large: '2rem',\n    },\n    borderRadius: '0.5rem',\n    shadows: {\n      small: '0 1px 3px rgba(99, 102, 241, 0.1)',\n      medium: '0 4px 6px rgba(99, 102, 241, 0.1)',\n      large: '0 10px 15px rgba(99, 102, 241, 0.1)',\n    },\n    animations: {\n      duration: '0.3s',\n      easing: 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n  },\n  custom: {\n    id: 'custom',\n    name: 'Custom',\n    description: 'User-defined custom theme',\n    colors: {\n      primary: '#3B82F6',\n      secondary: '#1D4ED8',\n      accent: '#93C5FD',\n      background: '#FFFFFF',\n      surface: '#F9FAFB',\n      text: '#111827',\n      textSecondary: '#6B7280',\n    },\n    fonts: {\n      heading: 'Inter, sans-serif',\n      body: 'Inter, sans-serif',\n    },\n    spacing: {\n      small: '0.5rem',\n      medium: '1rem',\n      large: '2rem',\n    },\n    borderRadius: '0.5rem',\n    shadows: {\n      small: '0 1px 3px rgba(0, 0, 0, 0.1)',\n      medium: '0 4px 6px rgba(0, 0, 0, 0.1)',\n      large: '0 10px 15px rgba(0, 0, 0, 0.1)',\n    },\n    animations: {\n      duration: '0.3s',\n      easing: 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n  },\n};\n\nexport const getTheme = (themeType: ThemeType, customTheme?: ThemeProperties): ThemeProperties => {\n  if (themeType === 'custom' && customTheme) {\n    return customTheme;\n  }\n  return defaultThemes[themeType] || defaultThemes.mystique;\n};\n\nexport const createCustomTheme = (baseTheme: ThemeType, overrides: Partial<ThemeProperties>): ThemeProperties => {\n  const base = defaultThemes[baseTheme];\n  return {\n    ...base,\n    ...overrides,\n    id: 'custom',\n    name: overrides.name || 'Custom Theme',\n    colors: {\n      ...base.colors,\n      ...overrides.colors,\n    },\n    fonts: {\n      ...base.fonts,\n      ...overrides.fonts,\n    },\n    spacing: {\n      ...base.spacing,\n      ...overrides.spacing,\n    },\n    shadows: {\n      ...base.shadows,\n      ...overrides.shadows,\n    },\n    animations: {\n      ...base.animations,\n      ...overrides.animations,\n    },\n  };\n};\n\nexport const themeList = Object.values(defaultThemes).filter(theme => theme.id !== 'custom');\n","// Presentation AI Service - Integrated with existing AI provider infrastructure\n\nimport { aiProviderService } from './aiProviderService';\nimport { AIRequest } from '@/types/aiProvider';\nimport { \n  OutlineGenerationRequest, \n  PresentationOutline, \n  SlideGenerationRequest,\n  Slide,\n  SlideElement,\n  SlideLayout\n} from '@/types/presentation';\nimport { nanoid } from 'nanoid';\n\nexport class PresentationAIService {\n  /**\n   * Generate presentation outline using user's configured AI provider\n   */\n  async generateOutline(\n    userId: string, \n    request: OutlineGenerationRequest\n  ): Promise<PresentationOutline> {\n    const systemPrompt = `You are an expert presentation designer. Create a detailed presentation outline based on the user's requirements. \n\nReturn a JSON object with the following structure:\n{\n  \"title\": \"Presentation Title\",\n  \"description\": \"Brief description of the presentation\",\n  \"slides\": [\n    {\n      \"title\": \"Slide Title\",\n      \"content\": \"Main content points for this slide\",\n      \"layout\": \"title|content|two-column|image-text|full-image|quote|conclusion\",\n      \"notes\": \"Speaker notes (optional)\"\n    }\n  ],\n  \"estimatedDuration\": 15,\n  \"targetAudience\": \"Target audience description\",\n  \"objectives\": [\"Learning objective 1\", \"Learning objective 2\"]\n}\n\nGuidelines:\n- Create exactly ${request.numSlides} slides\n- Use ${request.style} tone and style\n- Target audience: ${request.targetAudience || 'general audience'}\n- Language: ${request.language}\n- Include a compelling title slide and conclusion slide\n- Ensure logical flow between slides\n- Provide actionable content points\n- Suggest appropriate layouts for each slide`;\n\n    const userPrompt = `Create a presentation about: ${request.topic}\n\nRequirements:\n- Number of slides: ${request.numSlides}\n- Style: ${request.style}\n- Language: ${request.language}\n- Target audience: ${request.targetAudience || 'general audience'}\n${request.objectives ? `- Objectives: ${request.objectives.join(', ')}` : ''}\n${request.duration ? `- Duration: ${request.duration} minutes` : ''}\n\nPlease provide a comprehensive outline that covers all key aspects of the topic.`;\n\n    const aiRequest: AIRequest = {\n      prompt: userPrompt,\n      systemPrompt,\n      temperature: 0.7,\n      maxTokens: 3000\n    };\n\n    try {\n      const response = await aiProviderService.generateResponse(userId, aiRequest);\n      \n      // Parse the JSON response\n      const cleanedContent = response.content\n        .replace(/```json\\n?/g, '')\n        .replace(/```\\n?/g, '')\n        .trim();\n      \n      const outline = JSON.parse(cleanedContent) as PresentationOutline;\n      \n      // Validate and ensure required fields\n      if (!outline.title || !outline.slides || !Array.isArray(outline.slides)) {\n        throw new Error('Invalid outline format received from AI');\n      }\n\n      // Ensure we have the right number of slides\n      if (outline.slides.length !== request.numSlides) {\n        console.warn(`AI generated ${outline.slides.length} slides instead of ${request.numSlides}`);\n      }\n\n      return outline;\n    } catch (error) {\n      console.error('Error generating outline:', error);\n      throw new Error('Failed to generate presentation outline');\n    }\n  }\n\n  /**\n   * Generate individual slide content\n   */\n  async generateSlideContent(\n    userId: string,\n    request: SlideGenerationRequest\n  ): Promise<Slide> {\n    const slideInfo = request.outline.slides[request.slideIndex];\n    if (!slideInfo) {\n      throw new Error('Invalid slide index');\n    }\n\n    const systemPrompt = `You are an expert slide designer. Create detailed slide content based on the outline provided.\n\nReturn a JSON object with this structure:\n{\n  \"id\": \"unique-id\",\n  \"title\": \"Slide Title\",\n  \"layout\": \"content|two-column|image-text|title|quote|conclusion\",\n  \"elements\": [\n    {\n      \"id\": \"element-id\",\n      \"type\": \"text|image|list|quote\",\n      \"content\": \"Element content or description for images\",\n      \"position\": {\n        \"x\": 0,\n        \"y\": 0,\n        \"width\": 100,\n        \"height\": 50\n      },\n      \"style\": {}\n    }\n  ],\n  \"notes\": \"Detailed speaker notes\",\n  \"duration\": 60,\n  \"transition\": \"fade\",\n  \"background\": {\n    \"type\": \"color\",\n    \"value\": \"#ffffff\"\n  },\n  \"order\": 0\n}\n\nGuidelines:\n- Create engaging, visual content\n- Use appropriate layout for the content type\n- Include speaker notes with talking points\n- For images, provide detailed descriptions\n- Keep text concise and impactful\n- Use bullet points for lists\n- Ensure content flows logically`;\n\n    const userPrompt = `Create slide content for:\nTitle: ${slideInfo.title}\nContent: ${slideInfo.content}\nLayout: ${slideInfo.layout}\nSlide ${request.slideIndex + 1} of ${request.outline.slides.length}\n\nContext from presentation:\n- Overall topic: ${request.outline.title}\n- Target audience: ${request.outline.targetAudience}\n- Presentation style: professional\n\nMake this slide engaging and visually appealing while maintaining consistency with the overall presentation theme.`;\n\n    const aiRequest: AIRequest = {\n      prompt: userPrompt,\n      systemPrompt,\n      temperature: 0.6,\n      maxTokens: 2000\n    };\n\n    try {\n      const response = await aiProviderService.generateResponse(userId, aiRequest);\n      \n      const cleanedContent = response.content\n        .replace(/```json\\n?/g, '')\n        .replace(/```\\n?/g, '')\n        .trim();\n      \n      const slideData = JSON.parse(cleanedContent);\n      \n      // Ensure required fields and generate IDs\n      const slide: Slide = {\n        id: slideData.id || nanoid(),\n        title: slideData.title || slideInfo.title,\n        layout: slideData.layout || slideInfo.layout || 'content',\n        elements: this.processSlideElements(slideData.elements || []),\n        notes: slideData.notes || slideInfo.notes || '',\n        duration: slideData.duration || 60,\n        transition: slideData.transition || 'fade',\n        background: slideData.background || { type: 'color', value: '#ffffff' },\n        order: request.slideIndex\n      };\n\n      return slide;\n    } catch (error) {\n      console.error('Error generating slide content:', error);\n      \n      // Fallback: create a basic slide\n      return this.createFallbackSlide(slideInfo, request.slideIndex);\n    }\n  }\n\n  /**\n   * Generate complete presentation from outline\n   */\n  async generatePresentation(\n    userId: string,\n    outline: PresentationOutline,\n    onProgress?: (current: number, total: number, message: string) => void\n  ): Promise<Slide[]> {\n    const slides: Slide[] = [];\n    \n    for (let i = 0; i < outline.slides.length; i++) {\n      onProgress?.(i, outline.slides.length, `Generating slide ${i + 1}...`);\n      \n      try {\n        const slide = await this.generateSlideContent(userId, {\n          outline,\n          slideIndex: i,\n          theme: 'mystique', // Default theme\n          includeImages: true\n        });\n        \n        slides.push(slide);\n        \n        // Small delay to prevent rate limiting\n        await new Promise(resolve => setTimeout(resolve, 500));\n      } catch (error) {\n        console.error(`Error generating slide ${i + 1}:`, error);\n        \n        // Add fallback slide\n        slides.push(this.createFallbackSlide(outline.slides[i], i));\n      }\n    }\n    \n    onProgress?.(outline.slides.length, outline.slides.length, 'Presentation generated!');\n    return slides;\n  }\n\n  /**\n   * Process and validate slide elements\n   */\n  private processSlideElements(elements: unknown[]): SlideElement[] {\n    return elements.map((element, index) => ({\n      id: (element as any).id || nanoid(),\n      type: (element as any).type || 'text',\n      content: (element as any).content || '',\n      position: {\n        x: (element as any).position?.x || 0,\n        y: (element as any).position?.y || (index * 20),\n        width: (element as any).position?.width || 100,\n        height: (element as any).position?.height || 20\n      },\n      style: (element as any).style || {},\n      animation: (element as any).animation\n    }));\n  }\n\n  /**\n   * Create a fallback slide when AI generation fails\n   */\n  private createFallbackSlide(slideInfo: unknown, index: number): Slide {\n    return {\n      id: nanoid(),\n      title: (slideInfo as any).title || `Slide ${index + 1}`,\n      layout: (slideInfo as any).layout || 'content',\n      elements: [\n        {\n          id: nanoid(),\n          type: 'text',\n          content: (slideInfo as any).content || 'Content will be added here.',\n          position: { x: 10, y: 20, width: 80, height: 60 },\n          style: { fontSize: '18px', color: '#333' }\n        }\n      ],\n      notes: (slideInfo as any).notes || '',\n      duration: 60,\n      transition: 'fade',\n      background: { type: 'color', value: '#ffffff' },\n      order: index\n    };\n  }\n\n  /**\n   * Enhance existing slide with AI suggestions\n   */\n  async enhanceSlide(\n    userId: string,\n    slide: Slide,\n    enhancement: 'improve-content' | 'add-visuals' | 'optimize-layout'\n  ): Promise<Slide> {\n    const systemPrompt = `You are an expert presentation designer. Enhance the provided slide based on the requested improvement type.\n\nReturn the enhanced slide as JSON with the same structure as the input.\n\nEnhancement type: ${enhancement}\n\nGuidelines:\n- improve-content: Make text more engaging, add bullet points, improve clarity\n- add-visuals: Suggest image placements, charts, or visual elements\n- optimize-layout: Improve element positioning and visual hierarchy`;\n\n    const userPrompt = `Enhance this slide:\n${JSON.stringify(slide, null, 2)}\n\nFocus on: ${enhancement}\nKeep the same overall structure but improve the specified aspect.`;\n\n    const aiRequest: AIRequest = {\n      prompt: userPrompt,\n      systemPrompt,\n      temperature: 0.5,\n      maxTokens: 2000\n    };\n\n    try {\n      const response = await aiProviderService.generateResponse(userId, aiRequest);\n      \n      const cleanedContent = response.content\n        .replace(/```json\\n?/g, '')\n        .replace(/```\\n?/g, '')\n        .trim();\n      \n      const enhancedSlide = JSON.parse(cleanedContent);\n      \n      return {\n        ...slide,\n        ...enhancedSlide,\n        id: slide.id, // Preserve original ID\n        order: slide.order // Preserve original order\n      };\n    } catch (error) {\n      console.error('Error enhancing slide:', error);\n      return slide; // Return original slide if enhancement fails\n    }\n  }\n}\n\nexport const presentationAIService = new PresentationAIService();\n","// Presentation Service - Main service for presentation management\n\nimport { \n  Presentation, \n  PresentationDocument, \n  OutlineGenerationRequest,\n  CreatePresentationRequest,\n  UpdatePresentationRequest,\n  Slide\n} from '@/types/presentation';\nimport { docsDecksHelpers } from '@/lib/database-helpers';\nimport { presentationAIService } from './presentationAIService';\nimport { nanoid } from 'nanoid';\n\nexport class PresentationService {\n  /**\n   * Create a new presentation\n   */\n  async createPresentation(\n    userId: string, \n    request: CreatePresentationRequest\n  ): Promise<{ data: PresentationDocument | null; error: unknown }> {\n    try {\n      const presentation: Presentation = {\n        id: nanoid(),\n        title: request.title,\n        description: request.description,\n        theme: request.theme,\n        customTheme: request.customTheme,\n        style: request.style,\n        pageStyle: request.pageStyle,\n        language: request.language,\n        totalSlides: 0,\n        estimatedDuration: request.estimatedDuration,\n        targetAudience: request.targetAudience,\n        tags: request.tags || [],\n        isPublic: request.isPublic,\n        status: 'draft',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        userId,\n        ideaId: request.ideaId,\n        slides: [],\n        settings: {\n          autoAdvance: false,\n          showNotes: true,\n          showProgress: true,\n          allowNavigation: true,\n          loop: false\n        }\n      };\n\n      const { data, error } = await docsDecksHelpers.createPresentation({\n        title: presentation.title,\n        content: JSON.stringify(presentation),\n        user_id: userId,\n        idea_id: request.ideaId,\n        metadata: {\n          presentation: {\n            id: presentation.id,\n            title: presentation.title,\n            theme: presentation.theme,\n            style: presentation.style,\n            totalSlides: 0,\n            status: 'draft',\n            createdAt: presentation.createdAt,\n            updatedAt: presentation.updatedAt,\n            userId,\n            isPublic: presentation.isPublic\n          },\n          generation: {},\n          analytics: {\n            views: 0,\n            downloads: 0,\n            shares: 0\n          }\n        }\n      });\n\n      return { data, error };\n    } catch (error) {\n      console.error('Error creating presentation:', error);\n      return { data: null, error };\n    }\n  }\n\n  /**\n   * Get presentation by ID\n   */\n  async getPresentation(\n    id: string, \n    userId: string\n  ): Promise<{ data: Presentation | null; error: unknown }> {\n    try {\n      const { data, error } = await docsDecksHelpers.getPresentation(id, userId);\n      \n      if (error || !data) {\n        return { data: null, error };\n      }\n\n      const presentation = JSON.parse(data.content) as Presentation;\n      return { data: presentation, error: null };\n    } catch (error) {\n      console.error('Error getting presentation:', error);\n      return { data: null, error };\n    }\n  }\n\n  /**\n   * Update presentation\n   */\n  async updatePresentation(\n    id: string,\n    userId: string,\n    updates: Partial<Presentation>\n  ): Promise<{ data: Presentation | null; error: unknown }> {\n    try {\n      // First get the current presentation document to access metadata\n      const { data: currentDoc, error: fetchDocError } = await docsDecksHelpers.getDocument(id, userId);\n\n      if (fetchDocError || !currentDoc) {\n        return { data: null, error: fetchDocError || new Error('Presentation not found') };\n      }\n\n      // Parse the current presentation\n      const current = JSON.parse(currentDoc.content) as Presentation;\n\n      // Merge updates\n      const updatedPresentation: Presentation = {\n        ...current,\n        ...updates,\n        updatedAt: new Date().toISOString(),\n        totalSlides: updates.slides ? updates.slides.length : current.totalSlides\n      };\n\n      // Update in database\n      const { data, error } = await docsDecksHelpers.updatePresentation(id, {\n        title: updatedPresentation.title,\n        content: JSON.stringify(updatedPresentation),\n        status: updatedPresentation.status,\n        metadata: {\n          presentation: {\n            id: updatedPresentation.id,\n            title: updatedPresentation.title,\n            theme: updatedPresentation.theme,\n            style: updatedPresentation.style,\n            totalSlides: updatedPresentation.totalSlides,\n            status: updatedPresentation.status,\n            createdAt: updatedPresentation.createdAt,\n            updatedAt: updatedPresentation.updatedAt,\n            userId: updatedPresentation.userId,\n            isPublic: updatedPresentation.isPublic\n          },\n          generation: currentDoc.metadata?.generation || {},\n          analytics: currentDoc.metadata?.analytics || { views: 0, downloads: 0, shares: 0 }\n        }\n      });\n\n      if (error) {\n        return { data: null, error };\n      }\n\n      return { data: updatedPresentation, error: null };\n    } catch (error) {\n      console.error('Error updating presentation:', error);\n      return { data: null, error };\n    }\n  }\n\n  /**\n   * Get user's presentations\n   */\n  async getUserPresentations(\n    userId: string,\n    options?: {\n      limit?: number;\n      offset?: number;\n      status?: string;\n      search?: string;\n    }\n  ): Promise<{ data: Presentation[] | null; error: unknown }> {\n    try {\n      const { data, error } = await docsDecksHelpers.getPresentations(userId, options);\n      \n      if (error) {\n        return { data: null, error };\n      }\n\n      const presentations = data?.map(doc => {\n        try {\n          return JSON.parse(doc.content) as Presentation;\n        } catch (parseError) {\n          console.error('Error parsing presentation content:', parseError);\n          return null;\n        }\n      }).filter(Boolean) as Presentation[];\n\n      return { data: presentations || [], error: null };\n    } catch (error) {\n      console.error('Error getting user presentations:', error);\n      return { data: null, error };\n    }\n  }\n\n  /**\n   * Delete presentation\n   */\n  async deletePresentation(\n    id: string, \n    userId: string\n  ): Promise<{ success: boolean; error: unknown }> {\n    try {\n      const { error } = await docsDecksHelpers.deletePresentation(id, userId);\n      return { success: !error, error };\n    } catch (error) {\n      console.error('Error deleting presentation:', error);\n      return { success: false, error };\n    }\n  }\n\n  /**\n   * Duplicate presentation\n   */\n  async duplicatePresentation(\n    id: string,\n    userId: string,\n    newTitle?: string\n  ): Promise<{ data: PresentationDocument | null; error: unknown }> {\n    try {\n      const { data, error } = await docsDecksHelpers.duplicatePresentation(id, userId, newTitle);\n      return { data, error };\n    } catch (error) {\n      console.error('Error duplicating presentation:', error);\n      return { data: null, error };\n    }\n  }\n\n  /**\n   * Generate presentation from AI\n   */\n  async generatePresentationFromAI(\n    userId: string,\n    request: OutlineGenerationRequest,\n    onProgress?: (stage: string, current: number, total: number, message: string) => void\n  ): Promise<{ data: Presentation | null; error: unknown }> {\n    try {\n      // Step 1: Generate outline\n      onProgress?.('outline', 0, 2, 'Generating presentation outline...');\n      \n      const outline = await presentationAIService.generateOutline(userId, request);\n      \n      // Step 2: Generate slides\n      onProgress?.('slides', 1, 2, 'Generating slides...');\n      \n      const slides = await presentationAIService.generatePresentation(\n        userId,\n        outline,\n        (current, total, message) => {\n          onProgress?.('slides', current, total, message);\n        }\n      );\n\n      // Step 3: Create presentation object\n      const presentation: Presentation = {\n        id: nanoid(),\n        title: outline.title,\n        description: outline.description,\n        theme: 'mystique',\n        style: request.style,\n        pageStyle: 'default',\n        language: request.language,\n        totalSlides: slides.length,\n        estimatedDuration: outline.estimatedDuration,\n        targetAudience: outline.targetAudience,\n        tags: [],\n        isPublic: false,\n        status: 'draft',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        userId,\n        slides,\n        outline,\n        settings: {\n          autoAdvance: false,\n          showNotes: true,\n          showProgress: true,\n          allowNavigation: true,\n          loop: false\n        }\n      };\n\n      onProgress?.('complete', 2, 2, 'Presentation generated successfully!');\n      \n      return { data: presentation, error: null };\n    } catch (error) {\n      console.error('Error generating presentation:', error);\n      return { data: null, error };\n    }\n  }\n\n  /**\n   * Save generated presentation to database\n   */\n  async saveGeneratedPresentation(\n    userId: string,\n    presentation: Presentation,\n    ideaId?: string\n  ): Promise<{ data: PresentationDocument | null; error: unknown }> {\n    try {\n      const { data, error } = await docsDecksHelpers.createPresentation({\n        title: presentation.title,\n        content: JSON.stringify(presentation),\n        user_id: userId,\n        idea_id: ideaId,\n        metadata: {\n          presentation: {\n            id: presentation.id,\n            title: presentation.title,\n            theme: presentation.theme,\n            style: presentation.style,\n            totalSlides: presentation.totalSlides,\n            status: presentation.status,\n            createdAt: presentation.createdAt,\n            updatedAt: presentation.updatedAt,\n            userId,\n            isPublic: presentation.isPublic\n          },\n          generation: {\n            generatedAt: new Date().toISOString(),\n            aiProvider: 'user-configured',\n            outline: presentation.outline\n          },\n          analytics: {\n            views: 0,\n            downloads: 0,\n            shares: 0\n          }\n        }\n      });\n\n      return { data, error };\n    } catch (error) {\n      console.error('Error saving generated presentation:', error);\n      return { data: null, error };\n    }\n  }\n\n  /**\n   * Update slide in presentation\n   */\n  async updateSlide(\n    presentationId: string,\n    userId: string,\n    slideId: string,\n    updates: Partial<Slide>\n  ): Promise<{ success: boolean; error: unknown }> {\n    try {\n      const { data: presentation, error: fetchError } = await this.getPresentation(presentationId, userId);\n      \n      if (fetchError || !presentation) {\n        return { success: false, error: fetchError || new Error('Presentation not found') };\n      }\n\n      const updatedSlides = presentation.slides.map(slide =>\n        slide.id === slideId ? { ...slide, ...updates } : slide\n      );\n\n      const { error } = await this.updatePresentation(presentationId, userId, {\n        slides: updatedSlides\n      });\n\n      return { success: !error, error };\n    } catch (error) {\n      console.error('Error updating slide:', error);\n      return { success: false, error };\n    }\n  }\n}\n\nexport const presentationService = new PresentationService();\n"],"names":["defaultThemes","mystique","id","name","description","colors","primary","secondary","accent","background","surface","text","textSecondary","fonts","heading","body","code","spacing","small","medium","large","borderRadius","shadows","animations","duration","easing","aurora","nexus","zenith","prism","velocity","quantum","eclipse","custom","getTheme","themeType","customTheme","themeList","Object","values","filter","theme","presentationAIService","generateOutline","userId","request","systemPrompt","concat","numSlides","style","targetAudience","language","aiRequest","prompt","topic","objectives","join","temperature","maxTokens","cleanedContent","aiProviderService","generateResponse","content","replace","trim","outline","JSON","parse","title","slides","Array","isArray","Error","length","console","warn","error","generateSlideContent","slideInfo","slideIndex","layout","slideData","nanoid","elements","this","processSlideElements","notes","transition","type","value","order","createFallbackSlide","generatePresentation","onProgress","i","slide","includeImages","push","Promise","resolve","setTimeout","map","element","index","_position","_position2","_position3","_position4","position","x","y","width","height","animation","fontSize","color","enhanceSlide","enhancement","stringify","enhancedSlide","_objectSpread","presentationService","createPresentation","presentation","pageStyle","totalSlides","estimatedDuration","tags","isPublic","status","createdAt","Date","toISOString","updatedAt","ideaId","settings","autoAdvance","showNotes","showProgress","allowNavigation","loop","data","docsDecksHelpers","user_id","idea_id","metadata","generation","analytics","views","downloads","shares","getPresentation","updatePresentation","updates","_currentDoc$metadata","_currentDoc$metadata2","currentDoc","fetchDocError","getDocument","current","updatedPresentation","getUserPresentations","options","getPresentations","doc","parseError","Boolean","deletePresentation","success","duplicatePresentation","newTitle","generatePresentationFromAI","total","message","saveGeneratedPresentation","generatedAt","aiProvider","updateSlide","presentationId","slideId","fetchError","updatedSlides"],"sourceRoot":""}