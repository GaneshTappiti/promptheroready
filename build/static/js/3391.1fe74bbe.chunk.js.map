{"version":3,"file":"static/js/3391.1fe74bbe.chunk.js","mappings":"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","sources":["utils/signupTest.ts","pages/SignupTest.tsx"],"sourcesContent":["import { supabase } from '@/lib/supabase';\r\nimport { isValidEmail } from '@/shared/utils/validation';\r\n\r\nexport interface SignupTestResult {\r\n  success: boolean;\r\n  message: string;\r\n  error?: unknown;\r\n  data?: unknown;\r\n}\r\n\r\n/**\r\n * Test signup functionality with detailed logging\r\n */\r\nexport const testSignupFlow = async (email: string, password: string): Promise<SignupTestResult> => {\r\n  try {\r\n    console.log('üîÑ Starting signup test...');\r\n    console.log('üìß Email:', email);\r\n    console.log('üîí Password length:', password.length);\r\n\r\n    // Step 1: Validate email format\r\n    if (!isValidEmail(email)) {\r\n      return {\r\n        success: false,\r\n        message: 'Email validation failed - invalid format',\r\n        error: new Error('Invalid email format')\r\n      };\r\n    }\r\n    console.log('‚úÖ Email format validation passed');\r\n\r\n    // Step 2: Check password length\r\n    if (password.length < 6) {\r\n      return {\r\n        success: false,\r\n        message: 'Password validation failed - too short',\r\n        error: new Error('Password too short')\r\n      };\r\n    }\r\n    console.log('‚úÖ Password validation passed');\r\n\r\n    // Step 3: Attempt Supabase signup\r\n    console.log('üîÑ Attempting Supabase signup...');\r\n    const { data, error } = await supabase.auth.signUp({\r\n      email,\r\n      password,\r\n      options: {\r\n        emailRedirectTo: `${window.location.origin}/auth/callback`,\r\n      },\r\n    });\r\n\r\n    if (error) {\r\n      console.error('‚ùå Supabase signup error:', error);\r\n      return {\r\n        success: false,\r\n        message: `Supabase signup failed: ${(error as Error).message}`,\r\n        error\r\n      };\r\n    }\r\n\r\n    console.log('‚úÖ Supabase signup successful');\r\n    console.log('üìä Signup data:', data);\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Signup completed successfully',\r\n      data\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Unexpected error during signup test:', error);\r\n    return {\r\n      success: false,\r\n      message: 'Unexpected error during signup',\r\n      error\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Test signup with a random email\r\n */\r\nexport const testRandomSignup = async (): Promise<SignupTestResult> => {\r\n  const timestamp = Date.now();\r\n  const randomEmail = `test.user.${timestamp}@example.com`;\r\n  const password = 'TestPassword123!';\r\n  \r\n  console.log('üé≤ Testing with random email:', randomEmail);\r\n  return testSignupFlow(randomEmail, password);\r\n};\r\n\r\n/**\r\n * Cleanup test user (for development only)\r\n */\r\nexport const cleanupTestUser = async (email: string): Promise<void> => {\r\n  try {\r\n    console.log('üßπ Attempting to cleanup test user:', email);\r\n    // Note: This would require admin privileges to delete users\r\n    // For now, just log the attempt\r\n    console.log('‚ö†Ô∏è User cleanup requires admin privileges');\r\n  } catch (error) {\r\n    console.error('‚ùå Error during cleanup:', error);\r\n  }\r\n};\r\n","import { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { testSignupFlow, testRandomSignup } from '@/utils/signupTest';\r\nimport { isValidEmail } from '@/shared/utils/validation';\r\n\r\nexport default function SignupTest() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [result, setResult] = useState<any>(null);\r\n\r\n  const handleTestSignup = async () => {\r\n    setLoading(true);\r\n    setResult(null);\r\n    \r\n    try {\r\n      const testResult = await testSignupFlow(email, password);\r\n      setResult(testResult);\r\n    } catch (error) {\r\n      setResult({\r\n        success: false,\r\n        message: 'Test failed with unexpected error',\r\n        error\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRandomSignup = async () => {\r\n    setLoading(true);\r\n    setResult(null);\r\n    \r\n    try {\r\n      const testResult = await testRandomSignup();\r\n      setResult(testResult);\r\n    } catch (error) {\r\n      setResult({\r\n        success: false,\r\n        message: 'Random test failed with unexpected error',\r\n        error\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEmailValidation = () => {\r\n    const isValid = isValidEmail(email);\r\n    setResult({\r\n      success: isValid,\r\n      message: `Email validation: ${isValid ? 'VALID' : 'INVALID'}`,\r\n      data: { email, isValid }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-green-900 via-green-800 to-emerald-900 p-4\">\r\n      <div className=\"max-w-4xl mx-auto space-y-6\">\r\n        <Card className=\"bg-black/20 border-white/10\">\r\n          <CardHeader>\r\n            <CardTitle className=\"text-white\">Signup Testing Tool</CardTitle>\r\n            <CardDescription className=\"text-gray-300\">\r\n              Test the signup functionality and debug issues\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-6\">\r\n            {/* Manual Test */}\r\n            <div className=\"space-y-4\">\r\n              <h3 className=\"text-lg font-semibold text-white\">Manual Test</h3>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"test-email\" className=\"text-white\">Email</Label>\r\n                  <Input\r\n                    id=\"test-email\"\r\n                    type=\"email\"\r\n                    placeholder=\"test@example.com\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    className=\"bg-black/20 border-white/10 text-white\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"test-password\" className=\"text-white\">Password</Label>\r\n                  <Input\r\n                    id=\"test-password\"\r\n                    type=\"password\"\r\n                    placeholder=\"password123\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    className=\"bg-black/20 border-white/10 text-white\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"flex gap-2 flex-wrap\">\r\n                <Button \r\n                  onClick={handleTestSignup}\r\n                  disabled={loading || !email || !password}\r\n                  className=\"bg-green-600 hover:bg-green-700\"\r\n                >\r\n                  {loading ? 'Testing...' : 'Test Signup'}\r\n                </Button>\r\n                <Button \r\n                  onClick={handleEmailValidation}\r\n                  disabled={!email}\r\n                  variant=\"outline\"\r\n                  className=\"border-white/20 text-white hover:bg-white/10\"\r\n                >\r\n                  Validate Email\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Random Test */}\r\n            <div className=\"space-y-4\">\r\n              <h3 className=\"text-lg font-semibold text-white\">Random Test</h3>\r\n              <Button \r\n                onClick={handleRandomSignup}\r\n                disabled={loading}\r\n                className=\"bg-blue-600 hover:bg-blue-700\"\r\n              >\r\n                {loading ? 'Testing...' : 'Test with Random Email'}\r\n              </Button>\r\n            </div>\r\n\r\n            {/* Results */}\r\n            {result && (\r\n              <div className=\"space-y-4\">\r\n                <h3 className=\"text-lg font-semibold text-white\">Test Results</h3>\r\n                <Alert className={result.success ? \"bg-green-500/20 border-green-500/50\" : \"bg-red-500/20 border-red-500/50\"}>\r\n                  <AlertDescription className={result.success ? \"text-green-400\" : \"text-red-400\"}>\r\n                    <div className=\"space-y-2\">\r\n                      <div><strong>Status:</strong> {result.success ? 'SUCCESS' : 'FAILED'}</div>\r\n                      <div><strong>Message:</strong> {result.message}</div>\r\n                      {result.error && (\r\n                        <div><strong>Error:</strong> {(result.error as Error).message || JSON.stringify(result.error)}</div>\r\n                      )}\r\n                      {result.data && (\r\n                        <div><strong>Data:</strong> <pre className=\"text-xs mt-2 p-2 bg-black/20 rounded\">{JSON.stringify(result.data, null, 2)}</pre></div>\r\n                      )}\r\n                    </div>\r\n                  </AlertDescription>\r\n                </Alert>\r\n              </div>\r\n            )}\r\n\r\n            {/* Debug Info */}\r\n            <div className=\"space-y-4\">\r\n              <h3 className=\"text-lg font-semibold text-white\">Debug Information</h3>\r\n              <div className=\"text-sm text-gray-300 space-y-1\">\r\n                <div>Supabase URL: {import.meta.env.VITE_SUPABASE_URL}</div>\r\n                <div>Environment: {import.meta.env.NODE_ENV}</div>\r\n                <div>Current URL: {window.location.origin}</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["testSignupFlow","async","email","password","console","log","length","isValidEmail","success","message","error","Error","data","supabase","auth","signUp","options","emailRedirectTo","concat","window","location","origin","testRandomSignup","timestamp","Date","now","randomEmail","SignupTest","setEmail","useState","setPassword","loading","setLoading","result","setResult","_jsx","className","children","_jsxs","Card","CardHeader","CardTitle","CardDescription","CardContent","Label","htmlFor","Input","id","type","placeholder","value","onChange","e","target","Button","onClick","testResult","disabled","handleEmailValidation","isValid","variant","Alert","AlertDescription","JSON","stringify","import"],"sourceRoot":""}