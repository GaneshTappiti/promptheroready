"use strict";(self.webpackChunkpromptheroready=self.webpackChunkpromptheroready||[]).push([[4245],{4245:(e,t,r)=>{r.d(t,{$h:()=>d,B1:()=>i,Fw:()=>m,Hz:()=>p,LU:()=>o,MO:()=>c,NQ:()=>u,bj:()=>g,ld:()=>l,pJ:()=>_,tb:()=>N,vZ:()=>h});var a=r(89379),s=r(41736);const n=async function(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;const n=performance.now();try{const o=await(0,s.bD)(e,r),i=performance.now()-n;return(0,s.Jw)(t,i,!o.error),o.error&&console.error("\u274c ".concat(t," failed:"),o.error.message),(0,a.A)((0,a.A)({},o),{},{performance:{duration:i,operation:t}})}catch(o){const e=performance.now()-n;return(0,s.Jw)(t,e,!1),console.error("\u274c ".concat(t," error:"),o),{data:null,error:o,performance:{duration:e,operation:t}}}},o={getDashboardStats:async e=>n(async()=>{var t,r;const[a,n,o]=await Promise.all([s.ND.from("ideas").select("id, status").eq("user_id",e),s.ND.from("prompt_history").select("id").eq("user_id",e),s.ND.from("user_subscriptions").select("*, plan:subscription_plans(*)").eq("user_id",e).single()]);return{data:{activeIdeas:(null===(t=a.data)||void 0===t?void 0:t.filter(e=>"archived"!==e.status).length)||0,totalPrompts:(null===(r=n.data)||void 0===r?void 0:r.length)||0,subscription:o.data},error:a.error||n.error||o.error}},"workspace.getDashboardStats"),async getRecentActivity(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;return n(async()=>{const{data:r,error:a}=await s.ND.from("user_activity").select("\n            *,\n            idea:ideas(id, title),\n            mvp:mvps(id, name)\n          ").eq("user_id",e).order("created_at",{ascending:!1}).limit(t);return{data:r||[],error:a}},"workspace.getRecentActivity")},getUsageTracking:async e=>n(async()=>{const{data:t,error:r}=await s.ND.from("usage_tracking").select("*").eq("user_id",e).gte("period_start",new Date((new Date).getFullYear(),(new Date).getMonth(),1).toISOString());return{data:t||[],error:r}},"workspace.getUsageTracking")},i={getIdeas:async(e,t)=>n(async()=>{let r=s.ND.from("ideas").select("\n            *,\n            wiki_pages_count:wiki_pages(count),\n            journey_entries_count:journey_entries(count),\n            feedback_items_count:feedback_items(count)\n          ").eq("user_id",e);null!==t&&void 0!==t&&t.status&&(r=r.eq("status",t.status)),null!==t&&void 0!==t&&t.category&&(r=r.eq("category",t.category)),null!==t&&void 0!==t&&t.search&&(r=r.or("title.ilike.%".concat(t.search,"%,description.ilike.%").concat(t.search,"%"))),null!==t&&void 0!==t&&t.limit&&(r=r.limit(t.limit)),null!==t&&void 0!==t&&t.offset&&(r=r.range(t.offset,t.offset+(t.limit||10)-1));const{data:a,error:n}=await r.order("created_at",{ascending:!1});return{data:a||[],error:n}},"ideaVault.getIdeas"),createIdea:async e=>n(async()=>{const{data:t,error:r}=await s.ND.from("ideas").insert([(0,a.A)((0,a.A)({},e),{},{created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()})]).select().single();return{data:t,error:r}},"ideaVault.createIdea"),updateIdea:async(e,t)=>n(async()=>{const{data:r,error:n}=await s.ND.from("ideas").update((0,a.A)((0,a.A)({},t),{},{updated_at:(new Date).toISOString()})).eq("id",e).select().single();return{data:r,error:n}},"ideaVault.updateIdea"),deleteIdea:async e=>n(async()=>{const{error:t}=await s.ND.from("ideas").delete().eq("id",e);return{data:null,error:t}},"ideaVault.deleteIdea"),getIdeaCategories:async e=>n(async()=>{const{data:t,error:r}=await s.ND.from("ideas").select("category").eq("user_id",e).not("category","is",null);if(r)return{data:null,error:r};const a=t.reduce((e,t)=>(t.category&&(e[t.category]=(e[t.category]||0)+1),e),{});return{data:Object.entries(a).map(e=>{let[t,r]=e;return{category:t,count:r}}),error:null}},"ideaVault.getIdeaCategories")},c={async getIdeaWithDetails(e){const[t,r,a,n]=await Promise.all([s.ND.from("ideas").select("*").eq("id",e).single(),s.ND.from("wiki_pages").select("*").eq("idea_id",e).order("order_index"),s.ND.from("journey_entries").select("*").eq("idea_id",e).order("created_at",{ascending:!1}),s.ND.from("feedback_items").select("*").eq("idea_id",e).order("created_at",{ascending:!1})]);return{idea:t.data,wiki:r.data,journey:a.data,feedback:n.data,error:t.error||r.error||a.error||n.error}},async createWikiPage(e){const{data:t,error:r}=await s.ND.from("wiki_pages").insert([e]).select().single();return{data:t,error:r}},async updateWikiPage(e,t){const{data:r,error:a}=await s.ND.from("wiki_pages").update(t).eq("id",e).select().single();return{data:r,error:a}},async createJourneyEntry(e){const{data:t,error:r}=await s.ND.from("journey_entries").insert([e]).select().single();return{data:t,error:r}},async createFeedbackItem(e){const{data:t,error:r}=await s.ND.from("feedback_items").insert([e]).select().single();return{data:t,error:r}},async updateFeedbackStatus(e,t){const{data:r,error:a}=await s.ND.from("feedback_items").update({status:t}).eq("id",e).select().single();return{data:r,error:a}},getIdeas:async(e,t)=>i.getIdeas(e,t),createIdea:async e=>i.createIdea(e),updateIdea:async(e,t)=>i.updateIdea(e,t),deleteIdea:async e=>i.deleteIdea(e)},d={async getMVPs(e){const{data:t,error:r}=await s.ND.from("mvps").select("\n        *,\n        ideas (\n          id,\n          title,\n          description\n        )\n      ").eq("user_id",e).order("created_at",{ascending:!1});return{data:t,error:r}},async createMVP(e){const{data:t,error:r}=await s.ND.from("mvps").insert([e]).select().single();return{data:t,error:r}},async updateMVP(e,t){const{data:r,error:a}=await s.ND.from("mvps").update(t).eq("id",e).select().single();return{data:r,error:a}},async savePromptHistory(e){const{data:t,error:r}=await s.ND.from("prompt_history").insert([e]).select().single();return{data:t,error:r}},async getPromptHistory(e,t,r){let a=s.ND.from("prompt_history").select("*").order("created_at",{ascending:!1});e&&(a=a.eq("idea_id",e)),t&&(a=a.eq("mvp_id",t)),r&&(a=a.eq("section",r));const{data:n,error:o}=await a;return{data:n,error:o}},async getAITools(e,t){let r=s.ND.from("ai_tools").select("*").order("popularity_score",{ascending:!1});e&&(r=r.eq("category",e)),t&&(r=r.contains("platforms",[t]));const{data:a,error:n}=await r;return{data:a,error:n}}},l={async getOrCreateTeam(e,t){const{data:r,error:a}=await s.ND.from("teams").select("id, name, description").eq("owner_id",e).single();if(r)return{data:r,error:null};const{data:n,error:o}=await s.ND.from("teams").insert([{name:"".concat(t.split("@")[0],"'s Team"),description:"Default team",owner_id:e}]).select().single();return{data:n,error:o}},async getTeamMembers(e){const{data:t,error:r}=await s.ND.from("team_members").select("\n        *,\n        user_profiles (\n          id,\n          username,\n          first_name,\n          last_name,\n          avatar_url\n        )\n      ").eq("team_id",e);return{data:t,error:r}},async getTeamTasks(e){const{data:t,error:r}=await s.ND.from("team_tasks").select("\n        *,\n        assignee:user_profiles!assignee_id (\n          username,\n          first_name,\n          last_name\n        ),\n        creator:user_profiles!creator_id (\n          username,\n          first_name,\n          last_name\n        )\n      ").eq("team_id",e).order("created_at",{ascending:!1});return{data:t,error:r}},async createTeamTask(e){const{data:t,error:r}=await s.ND.from("team_tasks").insert([e]).select().single();return{data:t,error:r}},async updateTaskStatus(e,t){const{data:r,error:a}=await s.ND.from("team_tasks").update({status:t}).eq("id",e).select().single();return{data:r,error:a}},async getTeamMessages(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:50;const{data:r,error:a}=await s.ND.from("team_messages").select("*").eq("team_id",e).order("created_at",{ascending:!1}).limit(t);return{data:r,error:a}},async sendTeamMessage(e){const{data:t,error:r}=await s.ND.from("team_messages").insert([e]).select().single();return{data:t,error:r}},subscribeToTeamMessages:(e,t)=>s.ND.channel("team_messages_".concat(e)).on("postgres_changes",{event:"INSERT",schema:"public",table:"team_messages",filter:"team_id=eq.".concat(e)},t).subscribe()},u={async getDocuments(e,t){let r=s.ND.from("documents").select("\n        *,\n        ideas (\n          id,\n          title\n        )\n      ").eq("user_id",e);t&&(r=r.eq("document_type",t));const{data:a,error:n}=await r.order("created_at",{ascending:!1});return{data:a,error:n}},async getDocument(e,t){const{data:r,error:a}=await s.ND.from("documents").select("\n        *,\n        ideas (\n          id,\n          title\n        )\n      ").eq("id",e).eq("user_id",t).single();return{data:r,error:a}},async createDocument(e){const{data:t,error:r}=await s.ND.from("documents").insert([e]).select().single();return{data:t,error:r}},async updateDocument(e,t){const{data:r,error:a}=await s.ND.from("documents").update(t).eq("id",e).select().single();return{data:r,error:a}},async getDocumentTemplates(e){let t=s.ND.from("document_templates").select("*").eq("is_public",!0);e&&(t=t.eq("document_type",e));const{data:r,error:a}=await t.order("name");return{data:r,error:a}},async getPitchDecks(e){const{data:t,error:r}=await s.ND.from("documents").select("\n        *,\n        ideas (\n          id,\n          title\n        )\n      ").eq("user_id",e).eq("document_type","pitch_deck").order("created_at",{ascending:!1});return{data:t,error:r}},async createPitchDeck(e){const{data:t,error:r}=await s.ND.from("documents").insert([(0,a.A)((0,a.A)({},e),{},{document_type:"pitch_deck"})]).select().single();return{data:t,error:r}},async createPresentation(e){const{data:t,error:r}=await s.ND.from("documents").insert([(0,a.A)((0,a.A)({},e),{},{document_type:"pitch_deck",format:"json",status:"draft"})]).select().single();return{data:t,error:r}},async updatePresentation(e,t){const{data:r,error:n}=await s.ND.from("documents").update((0,a.A)((0,a.A)({},t),{},{updated_at:(new Date).toISOString()})).eq("id",e).eq("document_type","pitch_deck").select().single();return{data:r,error:n}},async getPresentation(e,t){const{data:r,error:a}=await s.ND.from("documents").select("\n        *,\n        ideas (\n          id,\n          title,\n          description\n        )\n      ").eq("id",e).eq("user_id",t).eq("document_type","pitch_deck").single();return{data:r,error:a}},async getPresentations(e,t){let r=s.ND.from("documents").select("\n        *,\n        ideas (\n          id,\n          title\n        )\n      ").eq("user_id",e).eq("document_type","pitch_deck");null!==t&&void 0!==t&&t.status&&(r=r.eq("status",t.status)),null!==t&&void 0!==t&&t.search&&(r=r.or("title.ilike.%".concat(t.search,"%,content.ilike.%").concat(t.search,"%"))),null!==t&&void 0!==t&&t.limit&&(r=r.limit(t.limit)),null!==t&&void 0!==t&&t.offset&&(r=r.range(t.offset,t.offset+(t.limit||10)-1));const{data:a,error:n}=await r.order("updated_at",{ascending:!1});return{data:a,error:n}},async deletePresentation(e,t){const{data:r,error:a}=await s.ND.from("documents").delete().eq("id",e).eq("user_id",t).eq("document_type","pitch_deck").select().single();return{data:r,error:a}},async duplicatePresentation(e,t,r){const{data:s,error:n}=await this.getPresentation(e,t);if(n||!s)return{data:null,error:n||new Error("Presentation not found")};const{data:o,error:i}=await this.createPresentation({title:r||"".concat(s.title," (Copy)"),content:s.content,user_id:t,idea_id:s.idea_id,metadata:(0,a.A)((0,a.A)({},s.metadata),{},{originalId:s.id,duplicatedAt:(new Date).toISOString()})});return{data:o,error:i}}},m={async saveOnboardingProfile(e){const{data:t,error:r}=await s.ND.from("user_onboarding_profiles").upsert([e],{onConflict:"user_id"}).select().single();return{data:t,error:r}},async getOnboardingProfile(e){const{data:t,error:r}=await s.ND.from("user_onboarding_profiles").select("*").eq("user_id",e).single();return{data:t,error:r}},async saveAIPreferences(e){const{data:t,error:r}=await s.ND.from("user_ai_preferences").upsert([e],{onConflict:"user_id"}).select().single();return{data:t,error:r}}},_={async getUserProfile(e){const{data:t,error:r}=await s.ND.from("user_profiles").select("\n        *,\n        user_subscriptions (\n          tier,\n          status,\n          current_period_end\n        ),\n        user_ai_preferences (\n          provider,\n          model_name,\n          temperature,\n          max_tokens\n        )\n      ").eq("id",e).single();return{data:t,error:r}},async updateUserProfile(e,t){const{data:r,error:a}=await s.ND.from("user_profiles").update(t).eq("id",e).select().single();return{data:r,error:a}},async updateAIPreferences(e,t){const{data:r,error:a}=await s.ND.from("user_ai_preferences").update(t).eq("user_id",e).select().single();return{data:r,error:a}},async getUsageStats(e){const{data:t,error:r}=await s.ND.from("usage_tracking").select("*").eq("user_id",e).gte("period_start",new Date((new Date).getFullYear(),(new Date).getMonth(),1).toISOString());return{data:t,error:r}}},p={async checkAdminRole(e){const{data:t,error:r}=await s.ND.from("user_admin_roles").select("\n        *,\n        admin_roles (\n          name,\n          permissions\n        )\n      ").eq("user_id",e).single();return{data:t,error:r}},async getSystemAnalytics(){const[e,t,r,a]=await Promise.all([s.ND.from("user_profiles").select("id, created_at, role").order("created_at",{ascending:!1}),s.ND.from("user_subscriptions").select("tier, status, created_at"),s.ND.from("ideas").select("id, status, created_at"),s.ND.from("prompt_history").select("id, created_at, ai_provider")]);return{users:e.data,subscriptions:t.data,ideas:r.data,prompts:a.data,error:e.error||t.error||r.error||a.error}},async getPromptTemplates(){const{data:e,error:t}=await s.ND.from("prompt_templates").select("*").order("created_at",{ascending:!1});return{data:e,error:t}},async createPromptTemplate(e){const{data:t,error:r}=await s.ND.from("prompt_templates").insert([e]).select().single();return{data:t,error:r}},async getAIToolsForAdmin(){const{data:e,error:t}=await s.ND.from("ai_tools").select("*").order("created_at",{ascending:!1});return{data:e,error:t}},async createAITool(e){const{data:t,error:r}=await s.ND.from("ai_tools").insert([e]).select().single();return{data:t,error:r}},async getAnnouncements(){const{data:e,error:t}=await s.ND.from("system_announcements").select("*").eq("is_active",!0).order("created_at",{ascending:!1});return{data:e,error:t}},async createAnnouncement(e){const{data:t,error:r}=await s.ND.from("system_announcements").insert([e]).select().single();return{data:t,error:r}}},g={async getSubscriptionPlans(){const{data:e,error:t}=await s.ND.from("subscription_plans").select("*").eq("is_active",!0).order("price");return{data:e,error:t}},async getUserSubscription(e){const{data:t,error:r}=await s.ND.from("user_subscriptions").select("\n        *,\n        subscription_plans (\n          name,\n          tier,\n          features,\n          limits\n        )\n      ").eq("user_id",e).single();return{data:t,error:r}},async updateSubscription(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"active";const{data:a,error:n}=await s.ND.from("user_subscriptions").update({plan_id:t,status:r,updated_at:(new Date).toISOString()}).eq("user_id",e).select().single();return{data:a,error:n}},async trackUsage(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;const{data:a,error:n}=await s.ND.from("usage_tracking").upsert([{user_id:e,resource_type:t,count:r,period_start:new Date((new Date).getFullYear(),(new Date).getMonth(),1).toISOString(),period_end:new Date((new Date).getFullYear(),(new Date).getMonth()+1,0).toISOString()}],{onConflict:"user_id,resource_type,period_start"}).select().single();return{data:a,error:n}}},f={subscribeToGlobalMessages:e=>s.ND.channel("global_messages").on("postgres_changes",{event:"INSERT",schema:"public",table:"messages"},e).subscribe(),subscribeToUserActivity:(e,t)=>s.ND.channel("user_activity_".concat(e)).on("postgres_changes",{event:"INSERT",schema:"public",table:"user_activity",filter:"user_id=eq.".concat(e)},t).subscribe(),subscribeToTeamTasks:(e,t)=>s.ND.channel("team_tasks_".concat(e)).on("postgres_changes",{event:"*",schema:"public",table:"team_tasks",filter:"team_id=eq.".concat(e)},t).subscribe()},y={async getInvestors(e,t){let r=s.ND.from("investors").select("*").eq("user_id",e);null!==t&&void 0!==t&&t.status&&(r=r.eq("status",t.status)),null!==t&&void 0!==t&&t.focus&&(r=r.ilike("focus","%".concat(t.focus,"%"))),null!==t&&void 0!==t&&t.stage&&(r=r.ilike("stage","%".concat(t.stage,"%")));const{data:a,error:n}=await r.order("created_at",{ascending:!1});return{data:a,error:n}},async createInvestor(e){const{data:t,error:r}=await s.ND.from("investors").insert([e]).select().single();return{data:t,error:r}},async updateInvestor(e,t){const{data:r,error:a}=await s.ND.from("investors").update(t).eq("id",e).select().single();return{data:r,error:a}},async logContact(e,t){const{data:r,error:n}=await s.ND.from("investors").select("contact_history").eq("id",e).single();if(n)return{data:null,error:n};const o=[...r.contact_history||[],(0,a.A)((0,a.A)({},t),{},{timestamp:(new Date).toISOString()})],{data:i,error:c}=await s.ND.from("investors").update({contact_history:o}).eq("id",e).select().single();return{data:i,error:c}},async getFundingRounds(e){const{data:t,error:r}=await s.ND.from("funding_rounds").select("*").eq("user_id",e).order("created_at",{ascending:!1});return{data:t,error:r}},async createFundingRound(e){const{data:t,error:r}=await s.ND.from("funding_rounds").insert([e]).select().single();return{data:t,error:r}},async updateFundingRound(e,t){const{data:r,error:a}=await s.ND.from("funding_rounds").update(t).eq("id",e).select().single();return{data:r,error:a}},async deleteInvestor(e){const{error:t}=await s.ND.from("investors").delete().eq("id",e);return{error:t}}},D={async getPitchScripts(e,t){let r=s.ND.from("pitch_scripts").select("*").eq("user_id",e);t&&(r=r.eq("script_type",t));const{data:a,error:n}=await r.order("created_at",{ascending:!1});return{data:a,error:n}},async createPitchScript(e){const{data:t,error:r}=await s.ND.from("pitch_scripts").insert([e]).select().single();return{data:t,error:r}},async updatePitchScript(e,t){const{data:r,error:a}=await s.ND.from("pitch_scripts").update(t).eq("id",e).select().single();return{data:r,error:a}},async getPitchDecks(e,t){let r=s.ND.from("pitch_decks").select("*").eq("user_id",e);t&&(r=r.eq("presentation_type",t));const{data:a,error:n}=await r.order("created_at",{ascending:!1});return{data:a,error:n}},async createPitchDeck(e){const{data:t,error:r}=await s.ND.from("pitch_decks").insert([e]).select().single();return{data:t,error:r}},async updatePitchDeck(e,t){const{data:r,error:a}=await s.ND.from("pitch_decks").update(t).eq("id",e).select().single();return{data:r,error:a}},async getPitchVideos(e,t){let r=s.ND.from("pitch_videos").select("*").eq("user_id",e);t&&(r=r.eq("video_type",t));const{data:a,error:n}=await r.order("created_at",{ascending:!1});return{data:a,error:n}},async createPitchVideo(e){const{data:t,error:r}=await s.ND.from("pitch_videos").insert([e]).select().single();return{data:t,error:r}},async updatePitchVideo(e,t){const{data:r,error:a}=await s.ND.from("pitch_videos").update(t).eq("id",e).select().single();return{data:r,error:a}}},w={async getProjects(e,t){let r=s.ND.from("projects").select("*").eq("user_id",e);t&&(r=r.eq("status",t));const{data:a,error:n}=await r.order("created_at",{ascending:!1});return{data:a,error:n}},async createProject(e){const{data:t,error:r}=await s.ND.from("projects").insert([e]).select().single();return{data:t,error:r}},async updateProject(e,t){const{data:r,error:a}=await s.ND.from("projects").update(t).eq("id",e).select().single();return{data:r,error:a}},async getTasks(e,t){let r=s.ND.from("tasks").select("\n        *,\n        projects (\n          id,\n          name,\n          color\n        )\n      ").eq("user_id",e);null!==t&&void 0!==t&&t.status&&(r=r.eq("status",t.status)),null!==t&&void 0!==t&&t.priority&&(r=r.eq("priority",t.priority)),null!==t&&void 0!==t&&t.projectId&&(r=r.eq("project_id",t.projectId));const{data:a,error:n}=await r.order("created_at",{ascending:!1});return{data:a,error:n}},async createTask(e){const{data:t,error:r}=await s.ND.from("tasks").insert([e]).select().single();return{data:t,error:r}},async updateTask(e,t){const{data:r,error:a}=await s.ND.from("tasks").update(t).eq("id",e).select().single();return{data:r,error:a}},async deleteTask(e){const{error:t}=await s.ND.from("tasks").delete().eq("id",e);return{error:t}},subscribeToTasks:(e,t)=>s.ND.channel("user_tasks_".concat(e)).on("postgres_changes",{event:"*",schema:"public",table:"tasks",filter:"user_id=eq.".concat(e)},t).subscribe()},N={async getProjectPhases(e,t){let r=s.ND.from("project_phases").select("\n        *,\n        phase_tasks (\n          id,\n          title,\n          status,\n          order_index\n        )\n      ").eq("user_id",e);t&&(r=r.eq("project_id",t));const{data:a,error:n}=await r.order("order_index");return{data:a,error:n}},async createProjectPhase(e){const{data:t,error:r}=await s.ND.from("project_phases").insert([e]).select().single();return{data:t,error:r}},async updateProjectPhase(e,t){const{data:r,error:a}=await s.ND.from("project_phases").update(t).eq("id",e).select().single();return{data:r,error:a}},async getPhaseTasks(e){const{data:t,error:r}=await s.ND.from("phase_tasks").select("*").eq("phase_id",e).order("order_index");return{data:t,error:r}},async createPhaseTask(e){const{data:t,error:r}=await s.ND.from("phase_tasks").insert([e]).select().single();return{data:t,error:r}},async updatePhaseTask(e,t){const{data:r,error:a}=await s.ND.from("phase_tasks").update(t).eq("id",e).select().single();return{data:r,error:a}},async deletePhaseTask(e){const{error:t}=await s.ND.from("phase_tasks").delete().eq("id",e);return{error:t}},async updatePhaseProgress(e){const{data:t}=await this.getPhaseTasks(e);if(!t||0===t.length)return await this.updateProjectPhase(e,{progress:0}),{progress:0};const r=t.filter(e=>"completed"===e.status).length,a=Math.round(r/t.length*100);return await this.updateProjectPhase(e,{progress:a}),{progress:a}}},h={workspace:o,ideaVault:i,ideaForge:c,mvpStudio:d,teamSpace:l,docsDecks:u,onboarding:m,profile:_,admin:p,subscription:g,realtime:f,investorRadar:y,pitchPerfect:D,taskPlanner:w,blueprintZone:N,aiProvider:{async trackAIUsage(e){const{data:t,error:r}=await s.ND.from("ai_provider_usage").insert([e]).select().single();return{data:t,error:r}},async getAIUsageStats(e,t){let r=s.ND.from("ai_provider_usage").select("*").eq("user_id",e);if(t){const e=new Date,a=new Date;switch(t){case"day":a.setDate(e.getDate()-1);break;case"week":a.setDate(e.getDate()-7);break;case"month":a.setMonth(e.getMonth()-1);break;case"year":a.setFullYear(e.getFullYear()-1)}r=r.gte("created_at",a.toISOString())}const{data:a,error:n}=await r.order("created_at",{ascending:!1});return{data:a,error:n}},async getUsageByProvider(e){const{data:t,error:r}=await s.ND.from("ai_provider_usage").select("provider, tokens_used, cost_usd").eq("user_id",e);if(r)return{data:null,error:r};const a=t.reduce((e,t)=>{const r=t;return e[r.provider]||(e[r.provider]={provider:r.provider,total_tokens:0,total_cost:0,request_count:0}),e[r.provider].total_tokens+=r.tokens_used||0,e[r.provider].total_cost+=r.cost_usd||0,e[r.provider].request_count+=1,e},{});return{data:Object.values(a),error:null}}},notifications:{async getNotifications(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=s.ND.from("notifications").select("*").eq("user_id",e);t&&(r=r.eq("is_read",!1));const{data:a,error:n}=await r.order("created_at",{ascending:!1});return{data:a,error:n}},async createNotification(e){const{data:t,error:r}=await s.ND.from("notifications").insert([e]).select().single();return{data:t,error:r}},async markAsRead(e){const{data:t,error:r}=await s.ND.from("notifications").update({is_read:!0}).eq("id",e).select().single();return{data:t,error:r}},async markAllAsRead(e){const{data:t,error:r}=await s.ND.from("notifications").update({is_read:!0}).eq("user_id",e).eq("is_read",!1).select();return{data:t,error:r}},async deleteNotification(e){const{error:t}=await s.ND.from("notifications").delete().eq("id",e);return{error:t}},subscribeToNotifications:(e,t)=>s.ND.channel("user_notifications_".concat(e)).on("postgres_changes",{event:"INSERT",schema:"public",table:"notifications",filter:"user_id=eq.".concat(e)},t).subscribe()},files:{async uploadFile(e,t,r,a){const n=e.name.split(".").pop(),o="".concat(Date.now(),".").concat(n),i="".concat(t,"/").concat(r,"/").concat(o),{data:c,error:d}=await s.ND.storage.from("attachments").upload(i,e);if(d)return{data:null,error:d};const{data:{publicUrl:l}}=s.ND.storage.from("attachments").getPublicUrl(i),{data:u,error:m}=await s.ND.from("file_attachments").insert([{filename:o,original_filename:e.name,file_size:e.size,mime_type:e.type,file_path:i,file_url:l,entity_type:t,entity_id:r,uploaded_by:a}]).select().single();return{data:u,error:m}},async getFileAttachments(e,t){const{data:r,error:a}=await s.ND.from("file_attachments").select("*").eq("entity_type",e).eq("entity_id",t).order("created_at",{ascending:!1});return{data:r,error:a}},async deleteFileAttachment(e){const{data:t,error:r}=await s.ND.from("file_attachments").select("file_path").eq("id",e).single();if(r)return{error:r};const{error:a}=await s.ND.storage.from("attachments").remove([t.file_path]);if(a)return{error:a};const{error:n}=await s.ND.from("file_attachments").delete().eq("id",e);return{error:n}}},workshop:{async validateAndSaveIdea(e,t,r){const{data:n,error:o}=await s.ND.from("ideas").insert([(0,a.A)((0,a.A)((0,a.A)({},e),t),{},{user_id:r,status:"validated"})]).select().single();return{data:n,error:o}},async getValidationHistory(e){const{data:t,error:r}=await s.ND.from("ideas").select("id, title, validation_score, market_opportunity, risk_assessment, created_at").eq("user_id",e).not("validation_score","is",null).order("created_at",{ascending:!1});return{data:t,error:r}}}}}}]);
//# sourceMappingURL=4245.6fdcfbfe.chunk.js.map