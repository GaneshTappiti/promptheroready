{"version":3,"file":"static/js/4245.6fdcfbfe.chunk.js","mappings":"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","sources":["lib/database-helpers.ts"],"sourcesContent":["// =====================================================\r\n// SUPABASE CONNECTION HELPERS FOR EACH PAGE\r\n// =====================================================\r\n// This file contains TypeScript helper functions for connecting\r\n// each page of your application to the Supabase database\r\n\r\nimport { supabase, withRetry, logPerformanceMetric } from '@/lib/supabase';\r\nimport type { Database } from '@/types/database';\r\n\r\n// Type definitions for better TypeScript support\r\ntype Tables = Database['public']['Tables'];\r\ntype Idea = Tables['ideas']['Row'];\r\ntype MVP = Tables['mvps']['Row'];\r\n\r\n// Enhanced response type with performance metrics\r\ntype DatabaseResponse<T> = {\r\n  data: T | null;\r\n  error: Error | null;\r\n  performance?: {\r\n    duration: number;\r\n    operation: string;\r\n  };\r\n};\r\n\r\n// Helper function to handle database operations with consistent error handling\r\nconst handleDatabaseOperation = async <T>(\r\n  operation: () => Promise<{ data: T | null; error: Error | null }>,\r\n  operationName: string,\r\n  retries: number = 2\r\n): Promise<DatabaseResponse<T>> => {\r\n  const startTime = performance.now();\r\n\r\n  try {\r\n    const result = await withRetry(operation, retries);\r\n    const duration = performance.now() - startTime;\r\n\r\n    logPerformanceMetric(operationName, duration, !result.error);\r\n\r\n    if (result.error) {\r\n      console.error(`❌ ${operationName} failed:`, (result.error as Error).message);\r\n    }\r\n\r\n    return {\r\n      ...result,\r\n      performance: { duration, operation: operationName }\r\n    };\r\n  } catch (error) {\r\n    const duration = performance.now() - startTime;\r\n    logPerformanceMetric(operationName, duration, false);\r\n\r\n    console.error(`❌ ${operationName} error:`, error);\r\n    return {\r\n      data: null,\r\n      error,\r\n      performance: { duration, operation: operationName }\r\n    };\r\n  }\r\n};\r\ntype TeamMessage = Tables['team_messages']['Row'];\r\n// type UserProfile = Tables['user_profiles']['Row'];\r\n\r\n// =====================================================\r\n// 1. WORKSPACE PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const workspaceHelpers = {\r\n  // Get user dashboard statistics with enhanced error handling\r\n  async getDashboardStats(userId: string): Promise<DatabaseResponse<{\r\n    activeIdeas: number;\r\n    totalPrompts: number;\r\n    subscription: Record<string, unknown> | null;\r\n  }>> {\r\n    return handleDatabaseOperation(\r\n      async () => {\r\n        const [ideasResult, promptsResult, subscriptionResult] = await Promise.all([\r\n          supabase.from('ideas').select('id, status').eq('user_id', userId),\r\n          supabase.from('prompt_history').select('id').eq('user_id', userId),\r\n          supabase.from('user_subscriptions').select('*, plan:subscription_plans(*)').eq('user_id', userId).single()\r\n        ]);\r\n\r\n        const activeIdeas = ideasResult.data?.filter(idea => idea.status !== 'archived').length || 0;\r\n        const totalPrompts = promptsResult.data?.length || 0;\r\n\r\n        const stats = {\r\n          activeIdeas,\r\n          totalPrompts,\r\n          subscription: subscriptionResult.data\r\n        };\r\n\r\n        const error = ideasResult.error || promptsResult.error || subscriptionResult.error;\r\n        return { data: stats, error };\r\n      },\r\n      'workspace.getDashboardStats'\r\n    );\r\n  },\r\n\r\n  // Get recent activity with enhanced error handling\r\n  async getRecentActivity(userId: string, limit = 10): Promise<DatabaseResponse<Record<string, unknown>[]>> {\r\n    return handleDatabaseOperation(\r\n      async () => {\r\n        const { data, error } = await supabase\r\n          .from('user_activity')\r\n          .select(`\r\n            *,\r\n            idea:ideas(id, title),\r\n            mvp:mvps(id, name)\r\n          `)\r\n          .eq('user_id', userId)\r\n          .order('created_at', { ascending: false })\r\n          .limit(limit);\r\n\r\n        return { data: data || [], error };\r\n      },\r\n      'workspace.getRecentActivity'\r\n    );\r\n  },\r\n\r\n  // Get usage tracking for current period\r\n  async getUsageTracking(userId: string): Promise<DatabaseResponse<Record<string, unknown>[]>> {\r\n    return handleDatabaseOperation(\r\n      async () => {\r\n        const { data, error } = await supabase\r\n          .from('usage_tracking')\r\n          .select('*')\r\n          .eq('user_id', userId)\r\n          .gte('period_start', new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString());\r\n\r\n        return { data: data || [], error };\r\n      },\r\n      'workspace.getUsageTracking'\r\n    );\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 2. IDEA VAULT PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const ideaVaultHelpers = {\r\n  // Get all user ideas with filtering and sorting\r\n  async getIdeas(userId: string, filters?: {\r\n    status?: string;\r\n    category?: string;\r\n    search?: string;\r\n    limit?: number;\r\n    offset?: number;\r\n  }): Promise<DatabaseResponse<Idea[]>> {\r\n    return handleDatabaseOperation(\r\n      async () => {\r\n        let query = supabase\r\n          .from('ideas')\r\n          .select(`\r\n            *,\r\n            wiki_pages_count:wiki_pages(count),\r\n            journey_entries_count:journey_entries(count),\r\n            feedback_items_count:feedback_items(count)\r\n          `)\r\n          .eq('user_id', userId);\r\n\r\n        if (filters?.status) {\r\n          query = query.eq('status', filters.status);\r\n        }\r\n        if (filters?.category) {\r\n          query = query.eq('category', filters.category);\r\n        }\r\n        if (filters?.search) {\r\n          query = query.or(`title.ilike.%${filters.search}%,description.ilike.%${filters.search}%`);\r\n        }\r\n        if (filters?.limit) {\r\n          query = query.limit(filters.limit);\r\n        }\r\n        if (filters?.offset) {\r\n          query = query.range(filters.offset, filters.offset + (filters.limit || 10) - 1);\r\n        }\r\n\r\n        const { data, error } = await query.order('created_at', { ascending: false });\r\n        return { data: data || [], error };\r\n      },\r\n      'ideaVault.getIdeas'\r\n    );\r\n  },\r\n\r\n  // Create new idea with validation\r\n  async createIdea(ideaData: Omit<Idea, 'id' | 'created_at' | 'updated_at'>): Promise<DatabaseResponse<Idea>> {\r\n    return handleDatabaseOperation(\r\n      async () => {\r\n        const { data, error } = await supabase\r\n          .from('ideas')\r\n          .insert([{\r\n            ...ideaData,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          }])\r\n          .select()\r\n          .single();\r\n\r\n        return { data, error };\r\n      },\r\n      'ideaVault.createIdea'\r\n    );\r\n  },\r\n\r\n  // Update idea with optimistic locking\r\n  async updateIdea(ideaId: string, updates: Partial<Idea>): Promise<DatabaseResponse<Idea>> {\r\n    return handleDatabaseOperation(\r\n      async () => {\r\n        const { data, error } = await supabase\r\n          .from('ideas')\r\n          .update({\r\n            ...updates,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .eq('id', ideaId)\r\n          .select()\r\n          .single();\r\n\r\n        return { data, error };\r\n      },\r\n      'ideaVault.updateIdea'\r\n    );\r\n  },\r\n\r\n  // Delete idea with cascade handling\r\n  async deleteIdea(ideaId: string): Promise<DatabaseResponse<null>> {\r\n    return handleDatabaseOperation(\r\n      async () => {\r\n        const { error } = await supabase\r\n          .from('ideas')\r\n          .delete()\r\n          .eq('id', ideaId);\r\n\r\n        return { data: null, error };\r\n      },\r\n      'ideaVault.deleteIdea'\r\n    );\r\n  },\r\n\r\n  // Get idea categories with usage count\r\n  async getIdeaCategories(userId: string): Promise<DatabaseResponse<Array<{ category: string; count: number }>>> {\r\n    return handleDatabaseOperation(\r\n      async () => {\r\n        const { data, error } = await supabase\r\n          .from('ideas')\r\n          .select('category')\r\n          .eq('user_id', userId)\r\n          .not('category', 'is', null);\r\n\r\n        if (error) return { data: null, error };\r\n\r\n        const categoryCount = data.reduce((acc: Record<string, number>, item) => {\r\n          if (item.category) {\r\n            acc[item.category] = (acc[item.category] || 0) + 1;\r\n          }\r\n          return acc;\r\n        }, {});\r\n\r\n        const categories = Object.entries(categoryCount).map(([category, count]) => ({\r\n          category,\r\n          count\r\n        }));\r\n\r\n        return { data: categories, error: null };\r\n      },\r\n      'ideaVault.getIdeaCategories'\r\n    );\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 3. IDEAFORGE PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const ideaForgeHelpers = {\r\n  // Get idea with all related data\r\n  async getIdeaWithDetails(ideaId: string) {\r\n    const [ideaResult, wikiResult, journeyResult, feedbackResult] = await Promise.all([\r\n      supabase.from('ideas').select('*').eq('id', ideaId).single(),\r\n      supabase.from('wiki_pages').select('*').eq('idea_id', ideaId).order('order_index'),\r\n      supabase.from('journey_entries').select('*').eq('idea_id', ideaId).order('created_at', { ascending: false }),\r\n      supabase.from('feedback_items').select('*').eq('idea_id', ideaId).order('created_at', { ascending: false })\r\n    ]);\r\n\r\n    return {\r\n      idea: ideaResult.data,\r\n      wiki: wikiResult.data,\r\n      journey: journeyResult.data,\r\n      feedback: feedbackResult.data,\r\n      error: ideaResult.error || wikiResult.error || journeyResult.error || feedbackResult.error\r\n    };\r\n  },\r\n\r\n  // Wiki operations\r\n  async createWikiPage(wikiData: Omit<Tables['wiki_pages']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('wiki_pages')\r\n      .insert([wikiData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async updateWikiPage(pageId: string, updates: Partial<Tables['wiki_pages']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('wiki_pages')\r\n      .update(updates)\r\n      .eq('id', pageId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Journey operations\r\n  async createJourneyEntry(entryData: Omit<Tables['journey_entries']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('journey_entries')\r\n      .insert([entryData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Feedback operations\r\n  async createFeedbackItem(feedbackData: Omit<Tables['feedback_items']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('feedback_items')\r\n      .insert([feedbackData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async updateFeedbackStatus(feedbackId: string, status: string) {\r\n    const { data, error } = await supabase\r\n      .from('feedback_items')\r\n      .update({ status })\r\n      .eq('id', feedbackId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Idea management operations (delegated to ideaVaultHelpers)\r\n  async getIdeas(userId: string, filters?: Record<string, unknown>) {\r\n    return ideaVaultHelpers.getIdeas(userId, filters);\r\n  },\r\n\r\n  async createIdea(ideaData: Record<string, unknown>) {\r\n    return ideaVaultHelpers.createIdea(ideaData as any);\r\n  },\r\n\r\n  async updateIdea(ideaId: string, updates: Record<string, unknown>) {\r\n    return ideaVaultHelpers.updateIdea(ideaId, updates);\r\n  },\r\n\r\n  async deleteIdea(ideaId: string) {\r\n    return ideaVaultHelpers.deleteIdea(ideaId);\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 4. MVP STUDIO PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const mvpStudioHelpers = {\r\n  // Get MVPs for user\r\n  async getMVPs(userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('mvps')\r\n      .select(`\r\n        *,\r\n        ideas (\r\n          id,\r\n          title,\r\n          description\r\n        )\r\n      `)\r\n      .eq('user_id', userId)\r\n      .order('created_at', { ascending: false });\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Create new MVP\r\n  async createMVP(mvpData: Omit<MVP, 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('mvps')\r\n      .insert([mvpData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Update MVP\r\n  async updateMVP(mvpId: string, updates: Partial<MVP>) {\r\n    const { data, error } = await supabase\r\n      .from('mvps')\r\n      .update(updates)\r\n      .eq('id', mvpId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Save prompt history\r\n  async savePromptHistory(promptData: {\r\n    user_id: string;\r\n    prompt_text: string;\r\n    response_text?: string;\r\n    prompt_type?: string;\r\n    ai_provider?: string;\r\n    model_used?: string;\r\n    tokens_used?: number;\r\n    idea_id?: string;\r\n    mvp_id?: string;\r\n    metadata?: Record<string, unknown>;\r\n  }) {\r\n    const { data, error } = await supabase\r\n      .from('prompt_history')\r\n      .insert([promptData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Get prompt history for idea/MVP\r\n  async getPromptHistory(ideaId?: string, mvpId?: string, section?: string) {\r\n    let query = supabase\r\n      .from('prompt_history')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (ideaId) query = query.eq('idea_id', ideaId);\r\n    if (mvpId) query = query.eq('mvp_id', mvpId);\r\n    if (section) query = query.eq('section', section);\r\n\r\n    const { data, error } = await query;\r\n    return { data, error };\r\n  },\r\n\r\n  // Get AI tools with filtering\r\n  async getAITools(category?: string, platform?: string) {\r\n    let query = supabase\r\n      .from('ai_tools')\r\n      .select('*')\r\n      .order('popularity_score', { ascending: false });\r\n\r\n    if (category) query = query.eq('category', category);\r\n    if (platform) query = query.contains('platforms', [platform]);\r\n\r\n    const { data, error } = await query;\r\n    return { data, error };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 5. TEAM SPACE PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const teamSpaceHelpers = {\r\n  // Get or create user's team\r\n  async getOrCreateTeam(userId: string, userEmail: string) {\r\n    // First try to get existing team\r\n    const { data: existingTeam, error: fetchError } = await supabase\r\n      .from('teams')\r\n      .select('id, name, description')\r\n      .eq('owner_id', userId)\r\n      .single();\r\n\r\n    if (existingTeam) {\r\n      return { data: existingTeam, error: null };\r\n    }\r\n\r\n    // Create new team if none exists\r\n    const { data: newTeam, error: createError } = await supabase\r\n      .from('teams')\r\n      .insert([{\r\n        name: `${userEmail.split('@')[0]}'s Team`,\r\n        description: 'Default team',\r\n        owner_id: userId\r\n      }])\r\n      .select()\r\n      .single();\r\n\r\n    return { data: newTeam, error: createError };\r\n  },\r\n\r\n  // Get team members\r\n  async getTeamMembers(teamId: string) {\r\n    const { data, error } = await supabase\r\n      .from('team_members')\r\n      .select(`\r\n        *,\r\n        user_profiles (\r\n          id,\r\n          username,\r\n          first_name,\r\n          last_name,\r\n          avatar_url\r\n        )\r\n      `)\r\n      .eq('team_id', teamId);\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Get team tasks\r\n  async getTeamTasks(teamId: string) {\r\n    const { data, error } = await supabase\r\n      .from('team_tasks')\r\n      .select(`\r\n        *,\r\n        assignee:user_profiles!assignee_id (\r\n          username,\r\n          first_name,\r\n          last_name\r\n        ),\r\n        creator:user_profiles!creator_id (\r\n          username,\r\n          first_name,\r\n          last_name\r\n        )\r\n      `)\r\n      .eq('team_id', teamId)\r\n      .order('created_at', { ascending: false });\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Create team task\r\n  async createTeamTask(taskData: Omit<Tables['team_tasks']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('team_tasks')\r\n      .insert([taskData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Update task status\r\n  async updateTaskStatus(taskId: string, status: string) {\r\n    const { data, error } = await supabase\r\n      .from('team_tasks')\r\n      .update({ status })\r\n      .eq('id', taskId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Real-time chat helpers\r\n  async getTeamMessages(teamId: string, limit = 50) {\r\n    const { data, error } = await supabase\r\n      .from('team_messages')\r\n      .select('*')\r\n      .eq('team_id', teamId)\r\n      .order('created_at', { ascending: false })\r\n      .limit(limit);\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async sendTeamMessage(messageData: Omit<TeamMessage, 'id' | 'created_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('team_messages')\r\n      .insert([messageData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Subscribe to team messages\r\n  subscribeToTeamMessages(teamId: string, callback: (payload: unknown) => void) {\r\n    return supabase\r\n      .channel(`team_messages_${teamId}`)\r\n      .on('postgres_changes', {\r\n        event: 'INSERT',\r\n        schema: 'public',\r\n        table: 'team_messages',\r\n        filter: `team_id=eq.${teamId}`\r\n      }, callback)\r\n      .subscribe();\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 6. DOCS & DECKS PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const docsDecksHelpers = {\r\n  // Get user documents\r\n  async getDocuments(userId: string, documentType?: string) {\r\n    let query = supabase\r\n      .from('documents')\r\n      .select(`\r\n        *,\r\n        ideas (\r\n          id,\r\n          title\r\n        )\r\n      `)\r\n      .eq('user_id', userId);\r\n\r\n    if (documentType) {\r\n      query = query.eq('document_type', documentType);\r\n    }\r\n\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n    return { data, error };\r\n  },\r\n\r\n  // Get single document\r\n  async getDocument(documentId: string, userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('documents')\r\n      .select(`\r\n        *,\r\n        ideas (\r\n          id,\r\n          title\r\n        )\r\n      `)\r\n      .eq('id', documentId)\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Create document\r\n  async createDocument(documentData: Omit<Tables['documents']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('documents')\r\n      .insert([documentData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Update document\r\n  async updateDocument(documentId: string, updates: Partial<Tables['documents']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('documents')\r\n      .update(updates)\r\n      .eq('id', documentId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Get document templates\r\n  async getDocumentTemplates(documentType?: string) {\r\n    let query = supabase\r\n      .from('document_templates')\r\n      .select('*')\r\n      .eq('is_public', true);\r\n\r\n    if (documentType) {\r\n      query = query.eq('document_type', documentType);\r\n    }\r\n\r\n    const { data, error } = await query.order('name');\r\n    return { data, error };\r\n  },\r\n\r\n  // Get pitch decks (documents with type 'pitch_deck')\r\n  async getPitchDecks(userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('documents')\r\n      .select(`\r\n        *,\r\n        ideas (\r\n          id,\r\n          title\r\n        )\r\n      `)\r\n      .eq('user_id', userId)\r\n      .eq('document_type', 'pitch_deck')\r\n      .order('created_at', { ascending: false });\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Create pitch deck\r\n  async createPitchDeck(deckData: Omit<Tables['documents']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('documents')\r\n      .insert([{\r\n        ...deckData,\r\n        document_type: 'pitch_deck'\r\n      }])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Presentation-specific helpers\r\n  async createPresentation(presentationData: {\r\n    title: string;\r\n    content: string; // JSON stringified presentation data\r\n    user_id: string;\r\n    idea_id?: string;\r\n    metadata?: unknown;\r\n  }) {\r\n    const { data, error } = await supabase\r\n      .from('documents')\r\n      .insert([{\r\n        ...presentationData,\r\n        document_type: 'pitch_deck',\r\n        format: 'json',\r\n        status: 'draft'\r\n      }])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async updatePresentation(id: string, updates: {\r\n    title?: string;\r\n    content?: string;\r\n    status?: string;\r\n    metadata?: unknown;\r\n  }) {\r\n    const { data, error } = await supabase\r\n      .from('documents')\r\n      .update({\r\n        ...updates,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', id)\r\n      .eq('document_type', 'pitch_deck')\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async getPresentation(id: string, userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('documents')\r\n      .select(`\r\n        *,\r\n        ideas (\r\n          id,\r\n          title,\r\n          description\r\n        )\r\n      `)\r\n      .eq('id', id)\r\n      .eq('user_id', userId)\r\n      .eq('document_type', 'pitch_deck')\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async getPresentations(userId: string, options?: {\r\n    limit?: number;\r\n    offset?: number;\r\n    status?: string;\r\n    search?: string;\r\n  }) {\r\n    let query = supabase\r\n      .from('documents')\r\n      .select(`\r\n        *,\r\n        ideas (\r\n          id,\r\n          title\r\n        )\r\n      `)\r\n      .eq('user_id', userId)\r\n      .eq('document_type', 'pitch_deck');\r\n\r\n    if (options?.status) {\r\n      query = query.eq('status', options.status);\r\n    }\r\n\r\n    if (options?.search) {\r\n      query = query.or(`title.ilike.%${options.search}%,content.ilike.%${options.search}%`);\r\n    }\r\n\r\n    if (options?.limit) {\r\n      query = query.limit(options.limit);\r\n    }\r\n\r\n    if (options?.offset) {\r\n      query = query.range(options.offset, (options.offset + (options.limit || 10)) - 1);\r\n    }\r\n\r\n    const { data, error } = await query.order('updated_at', { ascending: false });\r\n    return { data, error };\r\n  },\r\n\r\n  async deletePresentation(id: string, userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('documents')\r\n      .delete()\r\n      .eq('id', id)\r\n      .eq('user_id', userId)\r\n      .eq('document_type', 'pitch_deck')\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async duplicatePresentation(id: string, userId: string, newTitle?: string) {\r\n    // First get the original presentation\r\n    const { data: original, error: fetchError } = await this.getPresentation(id, userId);\r\n\r\n    if (fetchError || !original) {\r\n      return { data: null, error: fetchError || new Error('Presentation not found') };\r\n    }\r\n\r\n    // Create a copy with new title\r\n    const { data, error } = await this.createPresentation({\r\n      title: newTitle || `${original.title} (Copy)`,\r\n      content: original.content,\r\n      user_id: userId,\r\n      idea_id: original.idea_id,\r\n      metadata: {\r\n        ...original.metadata,\r\n        originalId: original.id,\r\n        duplicatedAt: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n    return { data, error };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 7. ONBOARDING PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const onboardingHelpers = {\r\n  // Save onboarding data\r\n  async saveOnboardingProfile(profileData: Omit<Tables['user_onboarding_profiles']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('user_onboarding_profiles')\r\n      .upsert([profileData], { onConflict: 'user_id' })\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Get onboarding profile\r\n  async getOnboardingProfile(userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('user_onboarding_profiles')\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Save AI preferences\r\n  async saveAIPreferences(preferencesData: Omit<Tables['user_ai_preferences']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('user_ai_preferences')\r\n      .upsert([preferencesData], { onConflict: 'user_id' })\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 8. PROFILE & SETTINGS PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const profileHelpers = {\r\n  // Get user profile\r\n  async getUserProfile(userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('user_profiles')\r\n      .select(`\r\n        *,\r\n        user_subscriptions (\r\n          tier,\r\n          status,\r\n          current_period_end\r\n        ),\r\n        user_ai_preferences (\r\n          provider,\r\n          model_name,\r\n          temperature,\r\n          max_tokens\r\n        )\r\n      `)\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Update user profile\r\n  async updateUserProfile(userId: string, updates: Partial<Tables['user_profiles']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('user_profiles')\r\n      .update(updates)\r\n      .eq('id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Update AI preferences\r\n  async updateAIPreferences(userId: string, updates: Partial<Tables['user_ai_preferences']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('user_ai_preferences')\r\n      .update(updates)\r\n      .eq('user_id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Get usage statistics\r\n  async getUsageStats(userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('usage_tracking')\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .gte('period_start', new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString());\r\n\r\n    return { data, error };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 9. ADMIN PANEL HELPERS\r\n// =====================================================\r\n\r\nexport const adminHelpers = {\r\n  // Check if user is admin\r\n  async checkAdminRole(userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('user_admin_roles')\r\n      .select(`\r\n        *,\r\n        admin_roles (\r\n          name,\r\n          permissions\r\n        )\r\n      `)\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Get system analytics\r\n  async getSystemAnalytics() {\r\n    const [usersResult, subscriptionsResult, ideasResult, promptsResult] = await Promise.all([\r\n      supabase.from('user_profiles').select('id, created_at, role').order('created_at', { ascending: false }),\r\n      supabase.from('user_subscriptions').select('tier, status, created_at'),\r\n      supabase.from('ideas').select('id, status, created_at'),\r\n      supabase.from('prompt_history').select('id, created_at, ai_provider')\r\n    ]);\r\n\r\n    return {\r\n      users: usersResult.data,\r\n      subscriptions: subscriptionsResult.data,\r\n      ideas: ideasResult.data,\r\n      prompts: promptsResult.data,\r\n      error: usersResult.error || subscriptionsResult.error || ideasResult.error || promptsResult.error\r\n    };\r\n  },\r\n\r\n  // Manage prompt templates\r\n  async getPromptTemplates() {\r\n    const { data, error } = await supabase\r\n      .from('prompt_templates')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async createPromptTemplate(templateData: Omit<Tables['prompt_templates']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('prompt_templates')\r\n      .insert([templateData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Manage AI tools directory\r\n  async getAIToolsForAdmin() {\r\n    const { data, error } = await supabase\r\n      .from('ai_tools')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async createAITool(toolData: Omit<Tables['ai_tools']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('ai_tools')\r\n      .insert([toolData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // System announcements\r\n  async getAnnouncements() {\r\n    const { data, error } = await supabase\r\n      .from('system_announcements')\r\n      .select('*')\r\n      .eq('is_active', true)\r\n      .order('created_at', { ascending: false });\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async createAnnouncement(announcementData: Omit<Tables['system_announcements']['Insert'], 'id' | 'created_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('system_announcements')\r\n      .insert([announcementData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 10. SUBSCRIPTION MANAGEMENT HELPERS\r\n// =====================================================\r\n\r\nexport const subscriptionHelpers = {\r\n  // Get subscription plans\r\n  async getSubscriptionPlans() {\r\n    const { data, error } = await supabase\r\n      .from('subscription_plans')\r\n      .select('*')\r\n      .eq('is_active', true)\r\n      .order('price');\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Get user subscription\r\n  async getUserSubscription(userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('user_subscriptions')\r\n      .select(`\r\n        *,\r\n        subscription_plans (\r\n          name,\r\n          tier,\r\n          features,\r\n          limits\r\n        )\r\n      `)\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Update subscription\r\n  async updateSubscription(userId: string, planId: string, status = 'active') {\r\n    const { data, error } = await supabase\r\n      .from('user_subscriptions')\r\n      .update({\r\n        plan_id: planId,\r\n        status,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('user_id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Track usage\r\n  async trackUsage(userId: string, resourceType: string, count = 1) {\r\n    const { data, error } = await supabase\r\n      .from('usage_tracking')\r\n      .upsert([{\r\n        user_id: userId,\r\n        resource_type: resourceType,\r\n        count,\r\n        period_start: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString(),\r\n        period_end: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).toISOString()\r\n      }], { onConflict: 'user_id,resource_type,period_start' })\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 11. REAL-TIME SUBSCRIPTIONS\r\n// =====================================================\r\n\r\nexport const realtimeHelpers = {\r\n  // Subscribe to global messages\r\n  subscribeToGlobalMessages(callback: (payload: unknown) => void) {\r\n    return supabase\r\n      .channel('global_messages')\r\n      .on('postgres_changes', {\r\n        event: 'INSERT',\r\n        schema: 'public',\r\n        table: 'messages'\r\n      }, callback)\r\n      .subscribe();\r\n  },\r\n\r\n  // Subscribe to user activity\r\n  subscribeToUserActivity(userId: string, callback: (payload: unknown) => void) {\r\n    return supabase\r\n      .channel(`user_activity_${userId}`)\r\n      .on('postgres_changes', {\r\n        event: 'INSERT',\r\n        schema: 'public',\r\n        table: 'user_activity',\r\n        filter: `user_id=eq.${userId}`\r\n      }, callback)\r\n      .subscribe();\r\n  },\r\n\r\n  // Subscribe to team tasks\r\n  subscribeToTeamTasks(teamId: string, callback: (payload: unknown) => void) {\r\n    return supabase\r\n      .channel(`team_tasks_${teamId}`)\r\n      .on('postgres_changes', {\r\n        event: '*',\r\n        schema: 'public',\r\n        table: 'team_tasks',\r\n        filter: `team_id=eq.${teamId}`\r\n      }, callback)\r\n      .subscribe();\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 12. INVESTOR RADAR PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const investorRadarHelpers = {\r\n  // Get all user investors\r\n  async getInvestors(userId: string, filters?: { status?: string; focus?: string; stage?: string }) {\r\n    let query = supabase\r\n      .from('investors')\r\n      .select('*')\r\n      .eq('user_id', userId);\r\n\r\n    if (filters?.status) query = query.eq('status', filters.status);\r\n    if (filters?.focus) query = query.ilike('focus', `%${filters.focus}%`);\r\n    if (filters?.stage) query = query.ilike('stage', `%${filters.stage}%`);\r\n\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n    return { data, error };\r\n  },\r\n\r\n  // Create new investor\r\n  async createInvestor(investorData: Omit<Tables['investors']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('investors')\r\n      .insert([investorData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Update investor\r\n  async updateInvestor(investorId: string, updates: Partial<Tables['investors']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('investors')\r\n      .update(updates)\r\n      .eq('id', investorId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Log contact with investor\r\n  async logContact(investorId: string, contactDetails: unknown) {\r\n    const { data: investor, error: fetchError } = await supabase\r\n      .from('investors')\r\n      .select('contact_history')\r\n      .eq('id', investorId)\r\n      .single();\r\n\r\n    if (fetchError) return { data: null, error: fetchError };\r\n\r\n    const updatedHistory = [...(investor.contact_history || []), {\r\n      ...(contactDetails as object),\r\n      timestamp: new Date().toISOString()\r\n    }];\r\n\r\n    const { data, error } = await supabase\r\n      .from('investors')\r\n      .update({ contact_history: updatedHistory })\r\n      .eq('id', investorId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Funding rounds management\r\n  async getFundingRounds(userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('funding_rounds')\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .order('created_at', { ascending: false });\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async createFundingRound(roundData: Omit<Tables['funding_rounds']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('funding_rounds')\r\n      .insert([roundData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async updateFundingRound(roundId: string, updates: Partial<Tables['funding_rounds']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('funding_rounds')\r\n      .update(updates)\r\n      .eq('id', roundId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Delete investor\r\n  async deleteInvestor(investorId: string) {\r\n    const { error } = await supabase\r\n      .from('investors')\r\n      .delete()\r\n      .eq('id', investorId);\r\n\r\n    return { error };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 13. PITCH PERFECT PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const pitchPerfectHelpers = {\r\n  // Pitch scripts management\r\n  async getPitchScripts(userId: string, scriptType?: string) {\r\n    let query = supabase\r\n      .from('pitch_scripts')\r\n      .select('*')\r\n      .eq('user_id', userId);\r\n\r\n    if (scriptType) query = query.eq('script_type', scriptType);\r\n\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n    return { data, error };\r\n  },\r\n\r\n  async createPitchScript(scriptData: Omit<Tables['pitch_scripts']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('pitch_scripts')\r\n      .insert([scriptData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async updatePitchScript(scriptId: string, updates: Partial<Tables['pitch_scripts']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('pitch_scripts')\r\n      .update(updates)\r\n      .eq('id', scriptId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Pitch decks management\r\n  async getPitchDecks(userId: string, presentationType?: string) {\r\n    let query = supabase\r\n      .from('pitch_decks')\r\n      .select('*')\r\n      .eq('user_id', userId);\r\n\r\n    if (presentationType) query = query.eq('presentation_type', presentationType);\r\n\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n    return { data, error };\r\n  },\r\n\r\n  async createPitchDeck(deckData: Omit<Tables['pitch_decks']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('pitch_decks')\r\n      .insert([deckData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async updatePitchDeck(deckId: string, updates: Partial<Tables['pitch_decks']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('pitch_decks')\r\n      .update(updates)\r\n      .eq('id', deckId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Pitch videos management\r\n  async getPitchVideos(userId: string, videoType?: string) {\r\n    let query = supabase\r\n      .from('pitch_videos')\r\n      .select('*')\r\n      .eq('user_id', userId);\r\n\r\n    if (videoType) query = query.eq('video_type', videoType);\r\n\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n    return { data, error };\r\n  },\r\n\r\n  async createPitchVideo(videoData: Omit<Tables['pitch_videos']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('pitch_videos')\r\n      .insert([videoData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async updatePitchVideo(videoId: string, updates: Partial<Tables['pitch_videos']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('pitch_videos')\r\n      .update(updates)\r\n      .eq('id', videoId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 14. TASK PLANNER PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const taskPlannerHelpers = {\r\n  // Projects management\r\n  async getProjects(userId: string, status?: string) {\r\n    let query = supabase\r\n      .from('projects')\r\n      .select('*')\r\n      .eq('user_id', userId);\r\n\r\n    if (status) query = query.eq('status', status);\r\n\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n    return { data, error };\r\n  },\r\n\r\n  async createProject(projectData: Omit<Tables['projects']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('projects')\r\n      .insert([projectData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async updateProject(projectId: string, updates: Partial<Tables['projects']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('projects')\r\n      .update(updates)\r\n      .eq('id', projectId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Tasks management\r\n  async getTasks(userId: string, filters?: { status?: string; priority?: string; projectId?: string }) {\r\n    let query = supabase\r\n      .from('tasks')\r\n      .select(`\r\n        *,\r\n        projects (\r\n          id,\r\n          name,\r\n          color\r\n        )\r\n      `)\r\n      .eq('user_id', userId);\r\n\r\n    if (filters?.status) query = query.eq('status', filters.status);\r\n    if (filters?.priority) query = query.eq('priority', filters.priority);\r\n    if (filters?.projectId) query = query.eq('project_id', filters.projectId);\r\n\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n    return { data, error };\r\n  },\r\n\r\n  async createTask(taskData: Omit<Tables['tasks']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('tasks')\r\n      .insert([taskData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async updateTask(taskId: string, updates: Partial<Tables['tasks']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('tasks')\r\n      .update(updates)\r\n      .eq('id', taskId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async deleteTask(taskId: string) {\r\n    const { error } = await supabase\r\n      .from('tasks')\r\n      .delete()\r\n      .eq('id', taskId);\r\n\r\n    return { error };\r\n  },\r\n\r\n  // Subscribe to task updates\r\n  subscribeToTasks(userId: string, callback: (payload: unknown) => void) {\r\n    return supabase\r\n      .channel(`user_tasks_${userId}`)\r\n      .on('postgres_changes', {\r\n        event: '*',\r\n        schema: 'public',\r\n        table: 'tasks',\r\n        filter: `user_id=eq.${userId}`\r\n      }, callback)\r\n      .subscribe();\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 15. BLUEPRINT ZONE PAGE HELPERS\r\n// =====================================================\r\n\r\nexport const blueprintZoneHelpers = {\r\n  // Project phases management\r\n  async getProjectPhases(userId: string, projectId?: string) {\r\n    let query = supabase\r\n      .from('project_phases')\r\n      .select(`\r\n        *,\r\n        phase_tasks (\r\n          id,\r\n          title,\r\n          status,\r\n          order_index\r\n        )\r\n      `)\r\n      .eq('user_id', userId);\r\n\r\n    if (projectId) query = query.eq('project_id', projectId);\r\n\r\n    const { data, error } = await query.order('order_index');\r\n    return { data, error };\r\n  },\r\n\r\n  async createProjectPhase(phaseData: Omit<Tables['project_phases']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('project_phases')\r\n      .insert([phaseData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async updateProjectPhase(phaseId: string, updates: Partial<Tables['project_phases']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('project_phases')\r\n      .update(updates)\r\n      .eq('id', phaseId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Phase tasks management\r\n  async getPhaseTasks(phaseId: string) {\r\n    const { data, error } = await supabase\r\n      .from('phase_tasks')\r\n      .select('*')\r\n      .eq('phase_id', phaseId)\r\n      .order('order_index');\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async createPhaseTask(taskData: Omit<Tables['phase_tasks']['Insert'], 'id' | 'created_at' | 'updated_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('phase_tasks')\r\n      .insert([taskData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async updatePhaseTask(taskId: string, updates: Partial<Tables['phase_tasks']['Update']>) {\r\n    const { data, error } = await supabase\r\n      .from('phase_tasks')\r\n      .update(updates)\r\n      .eq('id', taskId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  async deletePhaseTask(taskId: string) {\r\n    const { error } = await supabase\r\n      .from('phase_tasks')\r\n      .delete()\r\n      .eq('id', taskId);\r\n\r\n    return { error };\r\n  },\r\n\r\n  // Calculate and update phase progress\r\n  async updatePhaseProgress(phaseId: string) {\r\n    const { data: tasks } = await this.getPhaseTasks(phaseId);\r\n\r\n    if (!tasks || tasks.length === 0) {\r\n      await this.updateProjectPhase(phaseId, { progress: 0 });\r\n      return { progress: 0 };\r\n    }\r\n\r\n    const completedTasks = tasks.filter(task => task.status === 'completed').length;\r\n    const progress = Math.round((completedTasks / tasks.length) * 100);\r\n\r\n    await this.updateProjectPhase(phaseId, { progress });\r\n    return { progress };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 16. AI PROVIDER DASHBOARD HELPERS\r\n// =====================================================\r\n\r\nexport const aiProviderHelpers = {\r\n  // Track AI usage\r\n  async trackAIUsage(usageData: Omit<Tables['ai_provider_usage']['Insert'], 'id' | 'created_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('ai_provider_usage')\r\n      .insert([usageData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Get AI usage statistics\r\n  async getAIUsageStats(userId: string, timeframe?: 'day' | 'week' | 'month' | 'year') {\r\n    let query = supabase\r\n      .from('ai_provider_usage')\r\n      .select('*')\r\n      .eq('user_id', userId);\r\n\r\n    if (timeframe) {\r\n      const now = new Date();\r\n      const startDate = new Date();\r\n\r\n      switch (timeframe) {\r\n        case 'day':\r\n          startDate.setDate(now.getDate() - 1);\r\n          break;\r\n        case 'week':\r\n          startDate.setDate(now.getDate() - 7);\r\n          break;\r\n        case 'month':\r\n          startDate.setMonth(now.getMonth() - 1);\r\n          break;\r\n        case 'year':\r\n          startDate.setFullYear(now.getFullYear() - 1);\r\n          break;\r\n      }\r\n\r\n      query = query.gte('created_at', startDate.toISOString());\r\n    }\r\n\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n    return { data, error };\r\n  },\r\n\r\n  // Get usage by provider\r\n  async getUsageByProvider(userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('ai_provider_usage')\r\n      .select('provider, tokens_used, cost_usd')\r\n      .eq('user_id', userId);\r\n\r\n    if (error) return { data: null, error };\r\n\r\n    // Aggregate by provider\r\n    const aggregated = data.reduce((acc: unknown, usage: unknown) => {\r\n      const usageItem = usage as any;\r\n      if (!acc[usageItem.provider]) {\r\n        acc[usageItem.provider] = {\r\n          provider: usageItem.provider,\r\n          total_tokens: 0,\r\n          total_cost: 0,\r\n          request_count: 0\r\n        };\r\n      }\r\n\r\n      acc[usageItem.provider].total_tokens += usageItem.tokens_used || 0;\r\n      acc[usageItem.provider].total_cost += usageItem.cost_usd || 0;\r\n      acc[usageItem.provider].request_count += 1;\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return { data: Object.values(aggregated), error: null };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 17. NOTIFICATIONS HELPERS\r\n// =====================================================\r\n\r\nexport const notificationHelpers = {\r\n  // Get user notifications\r\n  async getNotifications(userId: string, unreadOnly = false) {\r\n    let query = supabase\r\n      .from('notifications')\r\n      .select('*')\r\n      .eq('user_id', userId);\r\n\r\n    if (unreadOnly) query = query.eq('is_read', false);\r\n\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n    return { data, error };\r\n  },\r\n\r\n  // Create notification\r\n  async createNotification(notificationData: Omit<Tables['notifications']['Insert'], 'id' | 'created_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('notifications')\r\n      .insert([notificationData])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Mark notification as read\r\n  async markAsRead(notificationId: string) {\r\n    const { data, error } = await supabase\r\n      .from('notifications')\r\n      .update({ is_read: true })\r\n      .eq('id', notificationId)\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Mark all notifications as read\r\n  async markAllAsRead(userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('notifications')\r\n      .update({ is_read: true })\r\n      .eq('user_id', userId)\r\n      .eq('is_read', false)\r\n      .select();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Delete notification\r\n  async deleteNotification(notificationId: string) {\r\n    const { error } = await supabase\r\n      .from('notifications')\r\n      .delete()\r\n      .eq('id', notificationId);\r\n\r\n    return { error };\r\n  },\r\n\r\n  // Subscribe to notifications\r\n  subscribeToNotifications(userId: string, callback: (payload: unknown) => void) {\r\n    return supabase\r\n      .channel(`user_notifications_${userId}`)\r\n      .on('postgres_changes', {\r\n        event: 'INSERT',\r\n        schema: 'public',\r\n        table: 'notifications',\r\n        filter: `user_id=eq.${userId}`\r\n      }, callback)\r\n      .subscribe();\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 18. FILE ATTACHMENTS HELPERS\r\n// =====================================================\r\n\r\nexport const fileHelpers = {\r\n  // Upload file attachment\r\n  async uploadFile(file: File, entityType: string, entityId: string, userId: string) {\r\n    // First upload to Supabase storage\r\n    const fileExt = file.name.split('.').pop();\r\n    const fileName = `${Date.now()}.${fileExt}`;\r\n    const filePath = `${entityType}/${entityId}/${fileName}`;\r\n\r\n    const { data: uploadData, error: uploadError } = await supabase.storage\r\n      .from('attachments')\r\n      .upload(filePath, file);\r\n\r\n    if (uploadError) return { data: null, error: uploadError };\r\n\r\n    // Get public URL\r\n    const { data: { publicUrl } } = supabase.storage\r\n      .from('attachments')\r\n      .getPublicUrl(filePath);\r\n\r\n    // Save file record to database\r\n    const { data, error } = await supabase\r\n      .from('file_attachments')\r\n      .insert([{\r\n        filename: fileName,\r\n        original_filename: file.name,\r\n        file_size: file.size,\r\n        mime_type: file.type,\r\n        file_path: filePath,\r\n        file_url: publicUrl,\r\n        entity_type: entityType,\r\n        entity_id: entityId,\r\n        uploaded_by: userId\r\n      }])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Get file attachments for entity\r\n  async getFileAttachments(entityType: string, entityId: string) {\r\n    const { data, error } = await supabase\r\n      .from('file_attachments')\r\n      .select('*')\r\n      .eq('entity_type', entityType)\r\n      .eq('entity_id', entityId)\r\n      .order('created_at', { ascending: false });\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Delete file attachment\r\n  async deleteFileAttachment(attachmentId: string) {\r\n    // First get the file info\r\n    const { data: attachment, error: fetchError } = await supabase\r\n      .from('file_attachments')\r\n      .select('file_path')\r\n      .eq('id', attachmentId)\r\n      .single();\r\n\r\n    if (fetchError) return { error: fetchError };\r\n\r\n    // Delete from storage\r\n    const { error: storageError } = await supabase.storage\r\n      .from('attachments')\r\n      .remove([attachment.file_path]);\r\n\r\n    if (storageError) return { error: storageError };\r\n\r\n    // Delete from database\r\n    const { error } = await supabase\r\n      .from('file_attachments')\r\n      .delete()\r\n      .eq('id', attachmentId);\r\n\r\n    return { error };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 19. WORKSHOP/IDEA VALIDATION HELPERS\r\n// =====================================================\r\n\r\nexport const workshopHelpers = {\r\n  // Enhanced idea validation (uses existing ideas table)\r\n  async validateAndSaveIdea(ideaData: unknown, validationResults: unknown, userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('ideas')\r\n      .insert([{\r\n        ...(ideaData as object),\r\n        ...(validationResults as object),\r\n        user_id: userId,\r\n        status: 'validated'\r\n      }])\r\n      .select()\r\n      .single();\r\n\r\n    return { data, error };\r\n  },\r\n\r\n  // Get validation history\r\n  async getValidationHistory(userId: string) {\r\n    const { data, error } = await supabase\r\n      .from('ideas')\r\n      .select('id, title, validation_score, market_opportunity, risk_assessment, created_at')\r\n      .eq('user_id', userId)\r\n      .not('validation_score', 'is', null)\r\n      .order('created_at', { ascending: false });\r\n\r\n    return { data, error };\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// 20. COMPREHENSIVE EXPORT\r\n// =====================================================\r\n\r\n// Export all helpers for easy importing\r\nexport const allHelpers = {\r\n  workspace: workspaceHelpers,\r\n  ideaVault: ideaVaultHelpers,\r\n  ideaForge: ideaForgeHelpers,\r\n  mvpStudio: mvpStudioHelpers,\r\n  teamSpace: teamSpaceHelpers,\r\n  docsDecks: docsDecksHelpers,\r\n  onboarding: onboardingHelpers,\r\n  profile: profileHelpers,\r\n  admin: adminHelpers,\r\n  subscription: subscriptionHelpers,\r\n  realtime: realtimeHelpers,\r\n  investorRadar: investorRadarHelpers,\r\n  pitchPerfect: pitchPerfectHelpers,\r\n  taskPlanner: taskPlannerHelpers,\r\n  blueprintZone: blueprintZoneHelpers,\r\n  aiProvider: aiProviderHelpers,\r\n  notifications: notificationHelpers,\r\n  files: fileHelpers,\r\n  workshop: workshopHelpers\r\n};\r\n"],"names":["handleDatabaseOperation","async","operation","operationName","retries","arguments","length","undefined","startTime","performance","now","result","withRetry","duration","logPerformanceMetric","error","console","concat","message","_objectSpread","data","workspaceHelpers","getDashboardStats","userId","_ideasResult$data","_promptsResult$data","ideasResult","promptsResult","subscriptionResult","Promise","all","supabase","from","select","eq","single","activeIdeas","filter","idea","status","totalPrompts","subscription","getRecentActivity","limit","order","ascending","getUsageTracking","gte","Date","getFullYear","getMonth","toISOString","ideaVaultHelpers","getIdeas","filters","query","category","search","or","offset","range","createIdea","ideaData","insert","created_at","updated_at","updateIdea","ideaId","updates","update","deleteIdea","delete","getIdeaCategories","not","categoryCount","reduce","acc","item","Object","entries","map","_ref","count","ideaForgeHelpers","getIdeaWithDetails","ideaResult","wikiResult","journeyResult","feedbackResult","wiki","journey","feedback","createWikiPage","wikiData","updateWikiPage","pageId","createJourneyEntry","entryData","createFeedbackItem","feedbackData","updateFeedbackStatus","feedbackId","mvpStudioHelpers","getMVPs","createMVP","mvpData","updateMVP","mvpId","savePromptHistory","promptData","getPromptHistory","section","getAITools","platform","contains","teamSpaceHelpers","getOrCreateTeam","userEmail","existingTeam","fetchError","newTeam","createError","name","split","description","owner_id","getTeamMembers","teamId","getTeamTasks","createTeamTask","taskData","updateTaskStatus","taskId","getTeamMessages","sendTeamMessage","messageData","subscribeToTeamMessages","callback","channel","on","event","schema","table","subscribe","docsDecksHelpers","getDocuments","documentType","getDocument","documentId","createDocument","documentData","updateDocument","getDocumentTemplates","getPitchDecks","createPitchDeck","deckData","document_type","createPresentation","presentationData","format","updatePresentation","id","getPresentation","getPresentations","options","deletePresentation","duplicatePresentation","newTitle","original","this","Error","title","content","user_id","idea_id","metadata","originalId","duplicatedAt","onboardingHelpers","saveOnboardingProfile","profileData","upsert","onConflict","getOnboardingProfile","saveAIPreferences","preferencesData","profileHelpers","getUserProfile","updateUserProfile","updateAIPreferences","getUsageStats","adminHelpers","checkAdminRole","getSystemAnalytics","usersResult","subscriptionsResult","users","subscriptions","ideas","prompts","getPromptTemplates","createPromptTemplate","templateData","getAIToolsForAdmin","createAITool","toolData","getAnnouncements","createAnnouncement","announcementData","subscriptionHelpers","getSubscriptionPlans","getUserSubscription","updateSubscription","planId","plan_id","trackUsage","resourceType","resource_type","period_start","period_end","realtimeHelpers","subscribeToGlobalMessages","subscribeToUserActivity","subscribeToTeamTasks","investorRadarHelpers","getInvestors","focus","ilike","stage","createInvestor","investorData","updateInvestor","investorId","logContact","contactDetails","investor","updatedHistory","contact_history","timestamp","getFundingRounds","createFundingRound","roundData","updateFundingRound","roundId","deleteInvestor","pitchPerfectHelpers","getPitchScripts","scriptType","createPitchScript","scriptData","updatePitchScript","scriptId","presentationType","updatePitchDeck","deckId","getPitchVideos","videoType","createPitchVideo","videoData","updatePitchVideo","videoId","taskPlannerHelpers","getProjects","createProject","projectData","updateProject","projectId","getTasks","priority","createTask","updateTask","deleteTask","subscribeToTasks","blueprintZoneHelpers","getProjectPhases","createProjectPhase","phaseData","updateProjectPhase","phaseId","getPhaseTasks","createPhaseTask","updatePhaseTask","deletePhaseTask","updatePhaseProgress","tasks","progress","completedTasks","task","Math","round","allHelpers","workspace","ideaVault","ideaForge","mvpStudio","teamSpace","docsDecks","onboarding","profile","admin","realtime","investorRadar","pitchPerfect","taskPlanner","blueprintZone","aiProvider","trackAIUsage","usageData","getAIUsageStats","timeframe","startDate","setDate","getDate","setMonth","setFullYear","getUsageByProvider","aggregated","usage","usageItem","provider","total_tokens","total_cost","request_count","tokens_used","cost_usd","values","notifications","getNotifications","unreadOnly","createNotification","notificationData","markAsRead","notificationId","is_read","markAllAsRead","deleteNotification","subscribeToNotifications","files","uploadFile","file","entityType","entityId","fileExt","pop","fileName","filePath","uploadData","uploadError","storage","upload","publicUrl","getPublicUrl","filename","original_filename","file_size","size","mime_type","type","file_path","file_url","entity_type","entity_id","uploaded_by","getFileAttachments","deleteFileAttachment","attachmentId","attachment","storageError","remove","workshop","validateAndSaveIdea","validationResults","getValidationHistory"],"sourceRoot":""}